# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import fxpFunctions as FXP
import expiringEvents as EXPEVENTS
import info as INFO
import events as EVENTS
import branches as BRANCHES
import metadata as METADATA

macro EVENTS_FIELDS: 6
macro OUTCOMES_FIELDS: 2
macro WINNING_OUTCOMES_FIELDS: 8
macro FIELDS: 16
macro METADATA_OFFSET: 5

# Markets' index is the marketID
# Events is a 0 indexed array of events in the market in the format of
    # [1, event, event, 2, event, 3, event, event, event]
    # 1 means dimension 1, 2 is events in dimension 2, 3 is the dimension 3 events
# Sharespurchased keeps track of the number of shares purchased for each outcome
    # sharesPurchased states starts at 1 - (same for participants[].shares[] array)
# Participants is a 0 indexed array of participants, their cashIDs, && the shares in each outcome they've purchased of an event
# a binary outcome state 1 is no, 2 is true, 0 if not determined
# tradingFee is a percent in fixedPoint
# tradingPeriod is which eventexpperiod market expires in
data Markets[](events[], sharesPurchased[], addr2participant[], participants[](participantID, shares[]), lenEvents, currentParticipant, winningOutcomes[], alpha, cumulativeScale, numOutcomes, tradingPeriod, tradingFee, branch, volume, forkSelection, pushingForward, bondsMan, originalPeriod, initialLiquidity[])

def getTotalSharesPurchased(market):
    total = 0
    n = self.Markets[market].numOutcomes
    i = 0
    while i < n:
        total += self.Markets[market].sharesPurchased[i]
        i += 1
    return(total)

def getMarketEvent(market, index):
    return(self.Markets[market].events[index])

def getMarketInfo(marketID):
    index = FIELDS
    participantNumber = self.Markets[marketID].addr2participant[tx.origin]
    descriptionLength = INFO.getDescriptionLength(marketID)
    traderFields = 1 + self.Markets[marketID].numOutcomes
    sourceLength = METADATA.getSourceLength(marketID)
    linksLength = METADATA.getLinksLength(marketID)
    metadataLength = METADATA_OFFSET + sourceLength + linksLength
    with metadata = slice(METADATA.getMetadata(marketID, outitems=metadataLength), items=0, items=metadataLength):
        with info = array(FIELDS + self.Markets[marketID].currentParticipant*traderFields + self.Markets[marketID].lenEvents*EVENTS_FIELDS + self.Markets[marketID].numOutcomes*OUTCOMES_FIELDS + WINNING_OUTCOMES_FIELDS + descriptionLength + sourceLength + linksLength + 1):
            numEvents = self.Markets[marketID].lenEvents
            info[0] = marketID
            info[1] = self.Markets[marketID].currentParticipant
            info[2] = self.Markets[marketID].alpha
            info[3] = participantNumber
            info[4] = self.Markets[marketID].numOutcomes
            info[5] = self.Markets[marketID].tradingPeriod
            info[6] = self.Markets[marketID].tradingFee
            info[7] = self.Markets[marketID].branch
            info[8] = numEvents
            info[9] = self.Markets[marketID].cumulativeScale
            info[10] = self.Markets[marketID].volume
            info[11] = INFO.getCreationFee(marketID)
            info[12] = INFO.getCreator(marketID)
            info[13] = metadata[0]  # tag1
            info[14] = metadata[1]  # tag2
            info[15] = metadata[2]  # tag3

            # gather trader(s) info: [trader ID, 1 shares, 2 shares, 3 shares, ...]
            t = 0
            while t < self.Markets[marketID].currentParticipant:
                info[index + t*traderFields] = self.Markets[marketID].participants[t].participantID
                o = 1
                while o < self.Markets[marketID].numOutcomes + 1:
                    info[index + t*traderFields + o] = self.Markets[marketID].participants[t].shares[o]
                    o += 1
                t += 1
            index += self.Markets[marketID].currentParticipant*traderFields

            # gather event(s) info:
            # [eventID, expirationDate, outcome, minValue, maxValue, numOutcomes]
            with events = slice(load(self.Markets[marketID].events[0], chars=32*numEvents), items=0, items=numEvents):
                i = 0
                while i < numEvents:
                    with eventInfo = EVENTS.getEventInfo(events[i], outitems=EVENTS_FIELDS):
                        info[index + i*EVENTS_FIELDS] = events[i]
                        j = 1
                        while j < EVENTS_FIELDS:
                            info[index + i*EVENTS_FIELDS + j] = eventInfo[j]
                            j += 1
                    i += 1
            index += numEvents*EVENTS_FIELDS

            # gather outcomes info:
            # [sharesPurchased, price, winningOutcomes...]
            k = 0
            while k < self.Markets[marketID].numOutcomes:
                info[index + k*OUTCOMES_FIELDS] = self.Markets[marketID].sharesPurchased[k + 1]
                info[index + k*OUTCOMES_FIELDS + 1] = self.price(marketID, k + 1)
                k += 1
            index += self.Markets[marketID].numOutcomes*OUTCOMES_FIELDS
            k = 0
            while k < WINNING_OUTCOMES_FIELDS:
                info[index + k] = self.Markets[marketID].winningOutcomes[k]
                k += 1
            index += WINNING_OUTCOMES_FIELDS

            # append description character codes
            info[index] = descriptionLength
            index += 1
            with description = INFO.getDescription(marketID, outchars=descriptionLength):
                c = 0
                while c < descriptionLength:
                    info[index + c] = getch(description, c)
                    c += 1
            index += descriptionLength

            # append source character codes
            info[index] = metadata[3]
            index += 1
            c = 0
            while c < metadata[3]:
                info[index + c] = metadata[METADATA_OFFSET + c]
                c += 1
            index += metadata[3]

            # append links character codes
            offset = METADATA_OFFSET + metadata[3]
            c = 0
            while c < metadata[4]:
                info[index + c] = metadata[offset + c]
                c += 1
            index += metadata[4]

            return(info: arr)

# Gets all information about all markets on the specified branch and
# returns it as a giant array.  getMarketsInfo requires a great deal of gas.
# Invoke using eth_call with gas=9999999999999 (or other very large number).
# @param {int} branch Branch ID that we're retrieving markets on.
# @param {int} offset Starting market index (0=full load).
# @param {int} numMarketsToLoad How many markets to load (0=all markets).
# @return array Array containing all data for all markets:
#            [N, length_1, length_2, ..., length_N, info_1, info_2, ..., info_N]
#           where length_j is the number of elements stored for market j,
#           info_j is the information array for market j, and N is the total
#           number of markets in this branch.
def getMarketsInfo(branch, offset, numMarketsToLoad):
    numMarkets = BRANCHES.getNumMarketsBranch(branch)
    with marketIDs = BRANCHES.getMarketsInBranch(branch, outitems=numMarkets):
        if numMarketsToLoad > 0 and numMarketsToLoad < numMarkets:
            numMarkets = numMarketsToLoad
        with marketsMatrix = array(numMarkets):
            with marketArrayLength = array(numMarkets):
                m = 0
                while m < numMarkets:
                    marketID = marketIDs[m + offset]
                    traderFields = 1 + self.Markets[marketID].numOutcomes
                    participantNumber = self.Markets[marketID].addr2participant[tx.origin]
                    descriptionLength = INFO.getDescriptionLength(marketID)
                    sourceLength = METADATA.getSourceLength(marketID)
                    linksLength = METADATA.getLinksLength(marketID)
                    marketArrayLength[m] = FIELDS + self.Markets[marketID].currentParticipant*traderFields + self.Markets[marketID].lenEvents*EVENTS_FIELDS + self.Markets[marketID].numOutcomes*OUTCOMES_FIELDS + WINNING_OUTCOMES_FIELDS + descriptionLength + sourceLength + linksLength + 1
                    marketsMatrix[m] = self.getMarketInfo(marketID, outitems=marketArrayLength[m])
                    m += 1

                # flatten the markets info matrix so it can be returned
                # (data offset by 1+numMarkets so length data can be prepended)
                totalFlatLength = 1 + numMarkets
                m = 0
                while m < numMarkets:
                    totalFlatLength += marketArrayLength[m]
                    m += 1
                with flattened = array(totalFlatLength):
                    flattened[0] = numMarkets
                    m = 0
                    while m < numMarkets:
                        flattened[m + 1] = marketArrayLength[m]
                        m += 1
                    currentFlatLength = 1 + numMarkets
                    row = 0
                    while row < numMarkets:
                        col = 0
                        while col < marketArrayLength[row]:
                            flattened[currentFlatLength + col] = marketsMatrix[row][col]
                            col += 1
                        currentFlatLength += col
                        row += 1
                    return(flattened: arr)

def getForkSelection(market):
    return(self.Markets[market].forkSelection)

def getMarketEvents(market):
    return(load(self.Markets[market].events[0], items=self.Markets[market].lenEvents): arr)

def getSharesPurchased(market, outcome):
    return(self.Markets[market].sharesPurchased[outcome])

def getVolume(market):
    return(self.Markets[market].volume)

def getParticipantNumber(market, address):
    participantNumber = self.Markets[market].addr2participant[address]
    if(self.Markets[market].participants[participantNumber].participantID != tx.origin):
        return(-1)
    else:
        return(participantNumber)

def getParticipantID(market, participantNumber):
    return(self.Markets[market].participants[participantNumber].participantID)

def getParticipantSharesPurchased(market, participantNumber, outcome):
    return(self.Markets[market].participants[participantNumber].shares[outcome])

def getNumEvents(market):
    return(self.Markets[market].lenEvents)

def getCurrentParticipantNumber(market):
    return(self.Markets[market].currentParticipant)

def getAlpha(market):
    return(self.Markets[market].alpha)

def getCumScale(market):
    return(self.Markets[market].cumulativeScale)

def getMarketNumOutcomes(market):
    return(self.Markets[market].numOutcomes)

def getTradingPeriod(market):
    return(self.Markets[market].tradingPeriod)

def getOriginalTradingPeriod(market):
    return(self.Markets[market].originalPeriod)

def setTradingPeriod(market, period):
    self.Markets[market].tradingPeriod = period
    return(1)

def getTradingFee(market):
    return(self.Markets[market].tradingFee)

def getBranchID(market):
    return(self.Markets[market].branch)

# alpha is equal to v/(n*log(n)) where v is the max percent commission
# && n is the number of outcomes people can trade. Alpha is set when
# a market is created.
# todo: sum trick
macro lsLmsr($marketID):
    with $bq = Bq($marketID):
        with $i = 1:
            with $sumExp = 0:
                while $i <= numOutcomes($marketID):
                    $sumExp += FXP.fx_exp(sharesPurchased($marketID)[$i] * 2**64 / $bq)
                    $i += 1
                $bq*cumScale($marketID)*FXP.fx_log($sumExp)/2**64
                
# Maximum value of array
macro maximum($a):
    with $max = $a[0]:
        with $i = 1:
            with $len = len($a):
                while $i < $len:
                    if $a[$i] > $max:
                        $max = $a[$i]
                    $i += 1
                $max

macro sumList($q, $a, $b):
    $i = $a + 1
    $result = $q[$a]
    while $i <= $b:
        $result += $q[$i]
        $i += 1
    $result

macro market($marketID):
    self.Markets[$marketID]

macro alpha($marketID):
    market($marketID).alpha

macro cumScale($marketID):
    market($marketID).cumulativeScale

macro numOutcomes($marketID):
    market($marketID).numOutcomes

macro sharesPurchased($marketID):
    market($marketID).sharesPurchased

macro particpant($marketID, $addr):
    market($marketID).participants[$addr]

macro Bq($marketID):
   alpha($marketID) * sumList(sharesPurchased($marketID), 1, numOutcomes($marketID)) / 2**64

def lsLmsr(marketID):
    return(lsLmsr(marketID))

def price(market, outcome):
    a = lsLmsr(market)
    sharesPurchased(market)[outcome] += 2**50
    b = lsLmsr(market)
    sharesPurchased(market)[outcome] -= 2**50
    return(((b - a) * 2**64)/2**50)

# check that msg.sender is one of our function contracts
def initializeMarket(marketID, events: arr, tradingPeriod, tradingFee, branch, forkSelection):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # add event list to the market
    save(self.Markets[marketID].events[0], events, items=len(events))
    self.Markets[marketID].lenEvents = len(events)
    self.Markets[marketID].tradingPeriod = tradingPeriod
    self.Markets[marketID].originalPeriod = tradingPeriod
    self.Markets[marketID].tradingFee = tradingFee
    self.Markets[marketID].branch = branch
    self.Markets[marketID].forkSelection = forkSelection
    return(1)

def addParticipant(market, address):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    participantNumber = self.Markets[market].currentParticipant
    self.Markets[market].participants[participantNumber].participantID = address
    self.Markets[market].addr2participant[address] = participantNumber
    self.Markets[market].currentParticipant += 1
    return(participantNumber)

def modifyShares(marketID, outcome, amount):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    sharesPurchased(marketID)[outcome] += amount
    return(1)

def modifyParticipantShares(branch, marketID, participantNumber, outcome, amount):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Markets[marketID].participants[participantNumber].shares[outcome] += amount
    if(block.number/BRANCHES.getPeriodLength(branch)>=self.getTradingPeriod(marketID)):
        return(1)
    else:
        if(amount<0):
            amount = amount*-1
        self.Markets[marketID].volume += amount
        EXPEVENTS.addPeriodVolume(branch, self.getTradingPeriod(marketID), amount)
        return(1)
        
def initialLiquidityAmount(market, outcome):
    return(self.Markets[market].initialLiquidity[outcome])

def setInitialLiquidityAmount(market, outcome, amount):
    self.Markets[market].initialLiquidity[outcome] = amount
    return(1)
    
def setWinningOutcomes(market, outcomes: arr):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # largest # of winning outcomes is 8
    save(self.Markets[market].winningOutcomes[0], outcomes, items=len(outcomes))
    return(1)

def getWinningOutcomes(market):
    # do whitelist, if oracle system branch, always return outcome, if in whitelist it's good, if not, log
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # largest # of winning outcomes is 8
    return(load(self.Markets[market].winningOutcomes[0], items=8): arr)

def initialLiquiditySetup(marketID, alpha, cumScale, numOutcomes):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Markets[marketID].alpha = alpha
    self.Markets[marketID].cumulativeScale = cumScale
    self.Markets[marketID].numOutcomes = numOutcomes
    return(1)

def setTradingFee(market, fee):
    self.Markets[market].tradingFee = fee
    return(fee)

def setPushedForward(market, bool):
    self.Markets[market].pushingForward = bool
    self.Markets[market].bondsMan = msg.sender
    return(1)

def getPushedForward(market):
    return(self.Markets[market].pushingForward)

def getBondsMan(market):
    return(self.Markets[market].bondsMan)