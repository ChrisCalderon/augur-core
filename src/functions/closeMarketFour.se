import cash as CASH
import markets as MARKETS
import events as EVENTS
inset('refund.se')

# four winning outcomes
def fourOutcomes(market, winningOutcome: arr, events: arr, sender):
    refund()
    # first is low-low && whatever, second is high-low, third is low-high, fourth is high-high
    scalarOne = -1
    scalarTwo = -1
    if(((EVENTS.getMaxValue(events[0])!=TWO || EVENTS.getMinValue(events[0])!=ONE) && EVENTS.getNumOutcomes(events[0])==2) || EVENTS.getOutcome(events[0])==3*ONEHALF):
        scalarOne = 0
    if(((EVENTS.getMaxValue(events[1])!=TWO || EVENTS.getMinValue(events[1])!=ONE) && EVENTS.getNumOutcomes(events[1])==2) || EVENTS.getOutcome(events[1])==3*ONEHALF):
        if(scalarOne == -1):
            scalarOne = 1
        else:
            scalarTwo = 1
    elif(((EVENTS.getMaxValue(events[2])!=TWO || EVENTS.getMinValue(events[2])!=ONE) && EVENTS.getNumOutcomes(events[2])==2) || EVENTS.getOutcome(events[2])==3*ONEHALF):
        scalarTwo = 2
    outcomeOne = EVENTS.getOutcome(events[scalarOne])
    minValueOne = EVENTS.getMinValue(events[scalarOne])
    maxValueOne = EVENTS.getMaxValue(events[scalarOne])
    if(outcomeOne>maxValueOne):
        outcomeOne = maxValueOne
    elif(outcomeOne<minValueOne):
        outcomeOne = minValueOne
    outcomeTwo = EVENTS.getOutcome(events[scalarTwo])
    minValueTwo = EVENTS.getMinValue(events[scalarTwo])
    maxValueTwo = EVENTS.getMaxValue(events[scalarTwo])
    if(outcomeTwo>maxValueTwo):
        outcomeTwo = maxValueTwo
    elif(outcomeTwo<minValueTwo):
        outcomeTwo = minValueTwo

    outcomeOneHighSidePercent = ONE*(outcomeOne - minValueOne) / (maxValueOne - minValueOne)
    outcomeOneLowSidePercent = ONE - outcomeOneHighSidePercent
    outcomeTwoHighSidePercent = ONE*(outcomeTwo - minValueTwo) / (maxValueTwo - minValueTwo)
    outcomeTwoLowSidePercent = ONE - outcomeTwoHighSidePercent

    # price is in fixed point
    # share four goes with the high-high side
    pricePerShare4 = outcomeOneHighSidePercent * outcomeTwoHighSidePercent / ONE
    # share three goes with the low-high side
    pricePerShare3 = outcomeOneLowSidePercent * outcomeTwoHighSidePercent / ONE
    # share two goes with the high-low side
    pricePerShare2 = outcomeOneHighSidePercent * outcomeTwoLowSidePercent / ONE
    # share one goes with the low-low
    # both fixed point so div by ONE to keep in fixed point
    pricePerShare1 = outcomeOneLowSidePercent * outcomeTwoLowSidePercent / ONE
    # distribute cashcoin to the people who won money by holding winning shares
    participantNumber = MARKETS.getParticipantNumber(market, sender)
    participant = MARKETS.getParticipantID(market, participantNumber)
    n = 0
    while(winningOutcome[n]!=0):
        sharesOwned = MARKETS.getParticipantSharesPurchased(market, participantNumber, winningOutcome[n])
        MARKETS.modifyParticipantShares(market, participantNumber, winningOutcome[n], -sharesOwned)
        # low-low
        if(n==0):
            CASH.subtractCash(market, sharesOwned*MARKETS.getCumScale(market)/ONE*pricePerShare1/ONE)
            CASH.addCash(participant, sharesOwned*MARKETS.getCumScale(market)/ONE*pricePerShare1/ONE)
        # high-low
        elif(n==1):
            CASH.subtractCash(market, sharesOwned*MARKETS.getCumScale(market)/ONE*pricePerShare2/ONE)
            CASH.addCash(participant, sharesOwned*MARKETS.getCumScale(market)/ONE*pricePerShare2/ONE)
        # low-high
        elif(n==2):
            CASH.subtractCash(market, sharesOwned*MARKETS.getCumScale(market)/ONE*pricePerShare3/ONE)
            CASH.addCash(participant, sharesOwned*MARKETS.getCumScale(market)/ONE*pricePerShare3/ONE)
        # high-high
        elif(n==3):
            CASH.subtractCash(market, sharesOwned*MARKETS.getCumScale(market)/ONE*pricePerShare4/ONE)
            CASH.addCash(participant, sharesOwned*MARKETS.getCumScale(market)/ONE*pricePerShare4/ONE)
        n+=1
    return(1)