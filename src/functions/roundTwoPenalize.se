import reporting as REPORTING
import branches as BRANCHES
import expiringEvents as EXPEVENTS
import events as EVENTS
import proportionCorrect as PROPORTION
import markets as MARKETS
import backstops as BACKSTOPS
import consensusData as CONSENSUS
import roundTwo as ROUNDTWO

inset('refund.se')

#event penalize(user:indexed, outcome, oldrep, repchange, newafterrep, p, reportValue)

macro POINTZEROONE: 184467440737095520
macro POINTEIGHT: 14757395258967642112
macro POINTTWO: 3689348814741910528
macro POINTFOUR: 7378697629483821056
macro MINBOND: 200*ONE

# So we want to do the rbcr for both period 1 and period 2 at this time
# essentially penalizeWrong for backstop 1 [where everyone reports on a given event]
# in a fork this is called on the original branch
# Errors:
    #  0: event is a fork event
    # -1: need to penalize in round 2 penalize function
    # -2: already past first half of new period and needed to penalize before then
    # -4: in fork period only thing that rbcr is done on is the round 2 event in the original branch via round 2 penalize
    # -5: already done for all events in this period
    # -6: forked events should be penalized using the fork penalization function
# force event to be resolved first if it can be
# roundTwoResolve needs to be called for any event here before can be penalized if it's a backstop 1 event, a la close market for other events before being penalized
def penalizeRoundTwoWrong(branch, event):
    refund()
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    forkPeriod = BRANCHES.getForkPeriod(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    newRep = 0
    newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender)
    oldRep = EXPEVENTS.getBeforeRep(branch, lastPeriod, msg.sender)
    roundTwo = BACKSTOPS.getRoundTwo(event)
    overruled = 0
    uncaught = EVENTS.getUncaughtOutcome(event)
    if(repBalance < ONE):
        return(0)
    if(CONSENSUS.getPenalizedUpTo(branch, msg.sender)==lastPeriod):
        return(-5)
    # if no events in a period
    if(EXPEVENTS.getNumberEvents(branch, lastPeriod)<=0):
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, lastPeriod)
        CONSENSUS.increaseDenominator(branch, lastPeriod, repBalance)
        return(1)
    elif(BRANCHES.getForkPeriod(branch) == lastPeriod && event!=forkEvent):
        return(-4)
    # if no outcome / event not resolved yet, resolve it [as long as it wasn't an event that was pushed fwd and got rejected and thus hasn't actually resolved yet]
    if(!uncaught):
        if(ROUNDTWO.roundTwoResolve(branch, event, EXPEVENTS.getEventIndex(votePeriod, event), msg.sender)==0):
            return(-7)
    outcome = catch(uncaught)
    if(scalar(event) or categorical(event)):
        outcome = uncaught
    forkEvent = BRANCHES.getEventForkedOver(branch)
    p = PROPORTION.proportionCorrect(event)
    reportValue = EXPEVENTS.getReport(branch, lastPeriod, event, msg.sender)
    lastPenalizationPeriod = lastPeriod - 1
    oldReport = EXPEVENTS.getReport(branch,lastPenalizationPeriod,event,msg.sender)
    ethics = EXPEVENTS.getEthicReport(branch, lastPeriod, event, msg.sender)
    oldEthics = EXPEVENTS.getEthicReport(branch, lastPenalizationPeriod, event, msg.sender)
    avgAdjCost = BRANCHES.getInitialBalance(branch, votePeriod)/EXPIRING.getNumberEvents(branch, votePeriod)
    bond = avgAdjCost + MARKETS.getSharesValue(market)*(POINTZEROONE + MARKETS.getTradingFee(market)/2) / 2**64
    bond = min(bond, MINBOND)
    # makes sure we're actually still able to report on the last vote period and that we're in 1st half of current period
    elif(residual > periodLength/2 or (block.timestamp / periodLength - 2)!=lastPeriod):
        return(-2)
    # if overruled / different outcome after reporting on again
    if(scalar(event) or categorical(event)):
        if((BACKSTOPS.getOriginalOutcome(event) != EVENTS.getUncaughtOutcome(event) or BACKSTOPS.getOriginalEthicality(event)!=ethic_catch(EVENTS.getEthical(event)))):
            overruled = 1
    elif((BACKSTOPS.getOriginalOutcome(event) != catch(EVENTS.getUncaughtOutcome(event)) or BACKSTOPS.getOriginalEthicality(event)!=ethic_catch(EVENTS.getEthical(event)))):
        overruled = 1
        
    numReportedOn = EXPEVENTS.getNumReportsActual(branch, lastPeriod, msg.sender)

    # penalization on a round 2 event if not already penalized, it has outcome, and user reported on it
    # if it's penalizing in the period it was pushed back to we can do the penalization, should do it for both the first and second period
    if(BACKSTOPS.getRoundTwo(event) && (BACKSTOPS.getFinal(event) or event==forkEvent) && !CONSENSUS.getPenalized(branch, lastPeriod, msg.sender, event) && (reportValue or oldReport)):
        newAfterRep = 0
        smoothedRep = 0
        # Do the first rbcr based on first report and final outcome if reported first time
        if(oldReport && outcome!=0):
            # wrong
            #184467440737095520 == 0.01 in fxp
            if(oldReport > outcome+POINTZEROONE or oldReport < outcome-POINTZEROONE):
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = oldReport - outcome
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*p - ONE)/ONE
            # right
            else:
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = oldReport - outcome
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*(ONE-p)**2 / p + ONE)/ONE
            # (1-k) * old rep + k * new rep where k = 0.4 / (number of events you reported on last period) for penalization and pen. rate for backstop 1
            # use .04 as a max penalty per event for round 2 liars who lied on first report
            if(numReportedOn<10):
                repChange = oldRep * (ONE - POINTFOUR/10)/ONE + newRep*(POINTFOUR/10)/ONE - oldRep
            else:
                repChange = oldRep * (ONE - POINTFOUR/numReportedOn)/ONE + newRep*(POINTFOUR/numReportedOn)/ONE - oldRep
            newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
            EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
            # for ethicality if diff. appeal then pay back the appeal bond from people who reported the wrong ethicality, but don't take rep beyond that and max at 20% of their rep respectively
            if(oldEthics != ethic_catch(EVENTS.getEthical(event)) && repChange >=0):
                repChange = -POINTTWO*repBalance / ONE
            if(repBalance + repChange <= 0):
                repChange = -1*repBalance
            # if overruled: reward the bonded challenger with whatever rep would normally be taken from the liars up to 2x the bond, rest goes to branch as usual later in the process
            if(overruled && BACKSTOPS.getBondPaid(event) < 2*bond && repChange < 0 && event!=forkEvent):
                # done instead of sending to redistrib. pool
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), repChange)
                # sends that rep to the bonded challenger
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), -repChange)
                BACKSTOPS.increaseBondPaid(event, (-1*repChange))
        # Do the second (for each user) based on second report and final outcome
        if(reportValue && outcome!=0):
            # wrong
            #184467440737095520 == 0.01 in fxp
            if(reportValue > outcome+POINTZEROONE or reportValue < outcome-POINTZEROONE):
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = reportValue - outcome
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*p - ONE)/ONE
            # right
            else:
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = reportValue - outcome    
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*(ONE-p)**2 / p + ONE)/ONE
            # (1-k) * old rep + k * new rep where k = 0.2 / (number of events you reported on last period) for penalization and pen. rate for backstop 1
            # use .02 as a max penalty per event for round 2 on second report
            if(numReportedOn<10):
                repChange = oldRep * (ONE - POINTTWO/10)/ONE + newRep*(POINTTWO/10)/ONE - oldRep
            else:
                repChange = oldRep * (ONE - POINTTWO/numReportedOn)/ONE + newRep*(POINTTWO/numReportedOn)/ONE - oldRep
            newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
            EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
            # for ethicality if diff. appeal then pay back the appeal bond from people who reported the wrong ethicality, but don't take rep beyond that and max at 20% of their rep respectively
            if(ethics != ethic_catch(EVENTS.getEthical(event)) && repChange >=0):
                repChange = -POINTTWO*repBalance / ONE
            if(repBalance + repChange <= 0):
                repChange = -1*repBalance
            if(overruled && BACKSTOPS.getBondPaid(event) < 2*bond && repChange < 0 && event!=forkEvent):
                # done instead of sending to redistrib. pool
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), repChange)
                # sends that rep to the bonded challenger
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), -repChange)
                BACKSTOPS.increaseBondPaid(event, (-1*repChange))
        CONSENSUS.setPenalized(branch, lastPeriod, msg.sender, event)
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, 1)
    else:
        return(0)
    # if a fork event in original branch, only event needed to report on in this period is that one [b/c the original branch resolves it as a regular round 2 event, fork reports again]
    if(event==forkEvent):
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, (EXPEVENTS.getNumReportsActual(branch, lastPeriod, msg.sender) - 1))
    # penalization on a regular event if not already penalized, it has outcome, and user reported on it
    if(numReportedOn==CONSENSUS.getPenalizedNum(branch, lastPeriod, msg.sender)):
        if(newAfterRep <= 0):
            newAfterRep = 0
            EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
        if(oldRep==0):
            EXPEVENTS.setAfterRep(branch, lastPeriod, repBalance, msg.sender)
            EXPEVENTS.setBeforeRep(branch, lastPeriod, repBalance, msg.sender)
            newAfterRep = repBalance
            oldRep = repBalance
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, lastPeriod)
        CONSENSUS.increaseDenominator(branch, lastPeriod, newAfterRep)
        totalRepDifference = newAfterRep - oldRep
        if(repBalance + totalRepDifference <= 0):
            totalRepDifference = -1*repBalance
        if(totalRepDifference<0):
            # removes rep from reporter who lost it [those who gained rep will get it in the claim rep phase]
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), totalRepDifference)
            # sends that rep to the branch
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -totalRepDifference)
    return(1)


### Helper functions:
macro YES: TWO
macro NO: ONE
macro BAD: 3 * ONEHALF
macro CATCH_TOLERANCE: ONE / 10

# put in consensus data

macro periodOver($branch):
    # what the current vote period should be
    currentVotePeriod = block.timestamp / BRANCHES.getPeriodLength($branch) - 1
    # if actual vote period is less than what the current one should be, return 1, it can be incremented
    if(BRANCHES.getVotePeriod($branch) < currentVotePeriod):
        1
    else:
        0
        
# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD

macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE

macro scalar($event):
    ((EVENTS.getMaxValue($event)!=TWO || EVENTS.getMinValue($event)!=ONE) && EVENTS.getNumOutcomes($event)==2)

macro categorical($event):
    (EVENTS.getNumOutcomes($event)>2)

macro abs($a):
    if($a<0):
        $a = -$a
    $a

macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE