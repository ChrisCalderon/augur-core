# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import info as INFO
import cash as CASH
import markets as MARKETS
import trades as TRADES
inset('refund.se')

event log_price(market:indexed, type, price, amount, timestamp, outcome, trader:indexed)
event log_add_tx(market:indexed, sender, type, price, amount, outcome, tradeid)
event log_fill_tx(market:indexed, sender:indexed, owner:indexed, type, price, amount, tradeid, outcome)
event log_cancel(market:indexed, sender, price, amount, tradeid, outcome, type)

# Trade types
macro BID: 1
macro ASK: 2
# Field counts
macro TRADE_FIELDS: 8
# Boolean success/failure
macro SUCCESS: 1
macro FAILURE: 0
# Error codes
macro INSUFFICIENT_BALANCE: 10
macro TRADE_ALREADY_EXISTS: 21
macro TRADE_SAME_BLOCK_PROHIBITED: 22

macro fee_percent($market_fee, $price, $cumScale):
    4 * $market_fee * $price * (ONE-$price*2**64/$cumScale) / ($cumScale*ONE)

macro save_trade($type, $amount, $price, $market, $outcome, $branch, $participantNumber, $fee, $sender):
    trade = [$type, $market, $amount, $price, $sender, block.number, $outcome]
    trade_id = sha256(trade, items=7)
    cumScale = MARKETS.getCumScale($market)

    # Save trade
    if !TRADES.getID(trade_id):
        TRADES.saveTrade(trade_id, $type, $market, $amount, $price, $sender, $outcome)
        # Update market
        last_id = MARKETS.getLastTrade($market)
        MARKETS.addTrade($market, trade_id, last_id)
        # Update available and trading amounts for asks
        if $type == ASK:
            MARKETS.modifyParticipantShares($market, $participantNumber, $outcome, -$amount, 0)
            if($fee):
                CASH.sendFrom($market, ($amount * $price * $fee / ONE^2), $sender)
        # Send / escrow cash for bids
        if $type == BID:
            CASH.sendFrom($market, $amount * $price / ONE, $sender)
            if($fee):
                CASH.sendFrom($market, ($amount * $price * $fee / ONE^2), $sender)
    else:
        return(TRADE_ALREADY_EXISTS)
    log(type=log_add_tx, $market, $sender, $type, $price, $amount, $outcome, trade_id)
    return(trade_id)

#
# Cancellation
#
# 200k gas
def cancel(trade_id):
    refund()
    # user can cancel anytime
    # Get trade
    trade = array(TRADE_FIELDS)
    trade = TRADES.get_trade(trade_id, outitems=TRADE_FIELDS)
    if !trade:
        return(0)
    type = trade[1]
    market = trade[2]
    amount = trade[3]
    price = trade[4]
    owner = trade[5]
    outcome = trade[7]
    branch = MARKETS.getBranchID(market)
    trading_fee = MARKETS.getTradingFee(market)
    cumScale = MARKETS.getCumScale(market)
    fee = fee_percent(trading_fee, price, cumScale) * MARKETS.getMakerFees(market) / ONE
    # Check the owner
    if msg.sender == owner:
        # Clear the trade first
        remove_trade(trade_id, market)
        # Issue refunds
        if type == BID:
            # cash refund
            amt = amount * price * (fee + ONE) / ONE^2
            CASH.subtractCash(market, amt)
            CASH.addCash(msg.sender, amt)
        elif type == ASK:
            # shares refund
            participantNumber = MARKETS.getParticipantNumber(market, msg.sender)
            MARKETS.modifyParticipantShares(market, participantNumber, outcome, amount, 1)
            CASH.subtractCash(market, (amount * price * fee / ONE^2))
            CASH.addCash(msg.sender, (amount * price * fee / ONE^2))
        # Log cancellation
        log(type=log_cancel, market, msg.sender, price, amount, trade_id, outcome, type)
        return(SUCCESS)
    return(FAILURE)

macro remove_trade($trade_id, $market):
    TRADES.remove_trade($trade_id)
    MARKETS.remove_trade_from_market($market, $trade_id)

#
# Buy / Sell actions
# Errors:
    # -1: amount/price bad or no market
    # -2: oracle only branch
    # -3: bad outcome to trade [not needed anymore, can't buy shares that don't exist]
    # -4: not enough money or shares
#
# costs 532k
# smallest trade value is 0.00000001
def buy(amount, price, market, outcome):
    refund()
    branch = MARKETS.getBranchID(market)
    if(BRANCHES.getOracleOnly(branch)):
        return(-2)
    participantNumber = MARKETS.getParticipantNumber(market, msg.sender)
    # if participant doesn't exist in market, add them
    if(msg.sender != MARKETS.getParticipantID(market, participantNumber)):
        participantNumber = MARKETS.addParticipant(market, msg.sender)
    trading_fee = MARKETS.getTradingFee(market)
    cumScale = MARKETS.getCumScale(market)
    fee = fee_percent(trading_fee, price, cumScale) * MARKETS.getMakerFees(market) / ONE
    if(price>cumScale or amount*price < 3402823669209384705829531287552 or amount*price >= 2**190):
        return(0)
    if(CASH.balance(msg.sender) < (amount * price * (fee + ONE) / ONE^2)):
        return(-4)
    save_trade(BID, amount, price, market, outcome, branch, participantNumber, fee, msg.sender)
    return(FAILURE)

# cost 532k
# smallest trade value is 0.00000001
def sell(amount, price, market, outcome):
    refund()
    branch = MARKETS.getBranchID(market)
    if(BRANCHES.getOracleOnly(branch)):
        return(-2)
    participantNumber = MARKETS.getParticipantNumber(market, msg.sender)
    if(MARKETS.getParticipantID(market, participantNumber) != msg.sender):
        return(-3)
    if(MARKETS.getParticipantSharesPurchased(market, participantNumber, outcome) < amount):
        return(-4)
    trading_fee = MARKETS.getTradingFee(market)
    cumScale = MARKETS.getCumScale(market)
    fee = fee_percent(trading_fee, price, cumScale) * MARKETS.getMakerFees(market) / ONE
    if(price>cumScale or amount*price < 3402823669209384705829531287552L or amount*price >= 2**190):
        return(0)
    if(CASH.balance(msg.sender) < (amount * price * fee / ONE^2)):
        return(-4)
    save_trade(ASK, amount, price, market, outcome, branch, participantNumber, fee, msg.sender)
    return(FAILURE)

# Example:
    #buyer gives up say 20
    #complete set cost is say 100
    #fee is say 2
    #market should lose 20 from buyer's escrowed money
    #market should gain 100 from complete set
    #person short selling should give the market 80 [complete set cost less shares sold]
    #plus fees
        #1 should go to branch
        #1 should go to creator
def short_sell(buyer_trade_id, max_amount):
    refund()
    # check trade hash
    tradeInfo = array(3)
    tradeInfo[0] = buyer_trade_id
    tradeInfo[1] = max_amount
    tradeInfo[2] = 0
    tradeHash = sha256(tradeInfo, items=3)
    if(TRADES.checkHash(tradeHash, msg.sender)==-1):
        return(-2)
    # Get trade
    trade = array(TRADE_FIELDS)
    trade = TRADES.get_trade(buyer_trade_id, outitems=TRADE_FIELDS)
    if !trade:
        return(3)
    # Get market
    type = trade[1]
    if(type!=BID):
        return(4)
    market = trade[2]
    if(MARKETS.getOneWinningOutcome(market, 0)):
        return(-4)
    orig_amount = trade[3]
    price = trade[4]
    owner = trade[5]
    outcome = trade[7]
    if(owner == msg.sender or owner == tx.origin):
        return(5)
    # Make sure the trade has been mined, obvious HFT prevention
    if block.number <= trade[6]:
        return(TRADE_SAME_BLOCK_PROHIBITED)
    branch = MARKETS.getBranchID(market)
    if(BRANCHES.getOracleOnly(branch)):
        return(-1)
    creator = INFO.getCreator(market)
    trading_fee = MARKETS.getTradingFee(market)
    cumScale = MARKETS.getCumScale(market)
    amount = min(orig_amount, max_amount)
    if(amount < 0):
        return(INSUFFICIENT_BALANCE)
    fee = amount * price * fee_percent(trading_fee, price, cumScale) / ONE^2
    makerFeeRate = MARKETS.getMakerFees(market)
    branchFees = (THREEFOURTHS+(ONEHALF - makerFeeRate)/2)*fee / ONE
    creatorFees = (ONEFOURTH+(ONEHALF - makerFeeRate)/2)*fee / ONE
    takerFeesTotal = branchFees + creatorFees
    cost = amount*cumScale/ONE - (amount*price/ONE - takerFeesTotal)
    if(CASH.balance(msg.sender) < cost):
        return(INSUFFICIENT_BALANCE)

    if(amount*price/ONE < 184467440738):
        return(-4)

    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    participantNumber = MARKETS.getParticipantNumber(market, msg.sender)
    # if participant doesn't exist in market, add them
    if(msg.sender != MARKETS.getParticipantID(market, participantNumber)):
        participantNumber = MARKETS.addParticipant(market, msg.sender)

    i = 1
    # send shares of the event to user address
    while i <= numOutcomes:
        MARKETS.modifyShares(market, i, amount)
        MARKETS.modifyParticipantShares(market, participantNumber, i, amount, 0)
        i += 1
    if(BRANCHES.getVotePeriod(branch)<MARKETS.getTradingPeriod(market)):
        MARKETS.modifySharesValue(market, amount*cumScale/ONE)
        EXPEVENTS.adjustPeriodShareValueOutstanding(branch, MARKETS.getTradingPeriod(market), amount*cumScale/ONE)

    # send money from user acc. to market address/account
    # cost for shares
    CASH.sendFrom(market, cost-takerFeesTotal, msg.sender)

    # Fill buy order
    # Determine fill amount
    fill = amount
    # Update trade amount or remove
    if fill < orig_amount:
        TRADES.fill_trade(trade_id, fill)
    else:
        remove_trade(trade_id, market)
    # Update balances
    ownerNum = MARKETS.getParticipantNumber(market, owner)
    MARKETS.modifyParticipantShares(market, participantNumber, outcome, -fill, 0)
    MARKETS.modifyParticipantShares(market, ownerNum, outcome, fill, 0)
    # Transfer cash from person who bid to the person here who is selling [bidder has already sent/escrowed the cash to/with the market when submitting bid]
    # 75% to branch + .5% more to branch per maker fee 1% decrease 
    CASH.sendFrom(branch, branchFees, msg.sender)
    # 25% to creator + .5% more to creator per 1% decrease in maker fees
    CASH.sendFrom(creator, creatorFees, msg.sender)

    # other party [maker] pay their part of the fee here too
    fee = fee * makerFeeRate / ONE
    CASH.subtractCash(market, fee)
    CASH.addCash(creator, fee/2)
    CASH.addCash(branch, fee/2)
    
    MARKETS.addFees(market, fee+takerFeesTotal)

    # Log transaction
    log(type=log_fill_tx, market, msg.sender, owner, ASK, price, fill, trade_id, outcome)
    # Log price, fill amount, type and timestamp
    log(type=log_price, market, type, price, fill, block.timestamp, outcome, msg.sender)
    return([SUCCESS, max_amount, fill, price]: arr)