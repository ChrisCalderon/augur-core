# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import info as INFO
import cash as CASH
import markets as MARKETS
import backstops as BACKSTOPS
import events as EVENTS
import expiringEvents as EXPEVENTS
inset('refund.se')

macro POINTZEROSIX: 1106804644422573056
macro COSTPERREPORTER: 3500000

def createSingleEventMarket(branch, description:str, expDate, minValue, maxValue, numOutcomes, resolution:str, tradingFee, tag1, tag2, tag3, makerFees, extraInfo:str):
    event = self.createEvent(branch, description, expDate, minValue, maxValue, numOutcomes, resolution)
    market = self.createMarket(branch, description, tradingFee, [event], tag1, tag2, tag3, makerFees, extraInfo)
    return(market)

# numOutcomes is number of outcomes for this event, e.g. quarter mile times from 10.0
# to 11.0 would be 11 outcomes (if incremented by 0.1)
# @return eventID if success
# error messages otherwise
    # -1: we're either already past that date, branch doesn't exist, or description is bad
    # 0: not enough money to pay fees or event already exists
    # -2: max value < min value
    # -9: would expire during non-reporting fork period
# .025 eth to create
def createEvent(branch, description:str, expDate, minValue, maxValue, numOutcomes, resolution: str):
    refund()
    periodLength = BRANCHES.getPeriodLength(branch)
    forkPeriod = BRANCHES.getForkPeriod(branch)
    if(forkPeriod && ((expDate / periodLength)==forkPeriod or (expDate / periodLength)==(forkPeriod+1))):
        return(-9)
    if(maxValue < minValue or (maxValue-minValue) < ONE):
        return(-2)
    eventID = 0
    if(periodLength && description != 0 && expDate > block.timestamp):
        eventinfo = string(8*32 + len(description))
        eventinfo[0] = EVENT                                        #typecode
        eventinfo[1] = branch                                       #branchID
        eventinfo[2] = expDate                                      #expiration date
        eventinfo[3] = msg.sender                                   #creator address
        eventinfo[4] = periodLength
        eventinfo[5] = minValue                                     #minimum outcome value
        eventinfo[6] = maxValue                                     #maximum outcome value
        eventinfo[7] = numOutcomes                                  #number of outcomes
        mcopy(eventinfo + 8*32, description, len(description))
        eventID = sha3(eventinfo, chars=len(eventinfo))
    else:
        return(-1)
    if(numOutcomes < 2 || numOutcomes > 8):
        return(0)
    currentVotePeriod = BRANCHES.getVotePeriod(branch)
    CASH.initiateOwner(eventID)
    if(!INFO.getCreator(eventID)):
        # see which future period it expires in && put the event in that bin
        # event voting periods - expDate / periodLength gives you the voting period #
        futurePeriod = expDate / periodLength
        if(INFO.setInfo(eventID, description, msg.sender, 0) && EVENTS.initializeEvent(eventID, branch, expDate, minValue, maxValue, numOutcomes, resolution)):
            return(eventID)
        else:
            return(0)
    else:
        return(0)

# tradingFee is a percent in fixedPoint
# @return marketID if success or 1 if on an oracle only branch creation we have success
# error messages otherwise
    # -1: bad input or parent doesn't exist
    # -2: too many events
    # -3: too many outcomes
    # -4: not enough money
    # -5: fee too low
    # -6: duplicate events
    # -7: event already expired
    # -8: market already exists
    # -9: would expire during non-reporting fork period
# .05 eth to create
# need to check that it's an actual subcurrency upon market creation (maybe check send/balance funs)
def createMarket(branch, description:str, tradingFee, events:arr, tag1, tag2, tag3, makerFees, extraInfo:str):
    if(makerFees<0 or makerFees > ONEHALF):
        return(0)
    periodLength = BRANCHES.getPeriodLength(branch)
    # send this to branch
    creationFee = POINTZEROSIX * BRANCHES.getBaseReporters(branch) * ONE / (2*tradingFee)
    # gives ether/cash amount in fixed point
    minFee = COSTPERREPORTER*BRANCHES.getBaseReporters(branch)*tx.gasprice*len(events)*ONE/WEITOETH
    if(creationFee < minFee):
        creationFee = minFee
    if(CASH.balance(msg.sender) < creationFee):
        return(-4)
    # will need to get equivalent value in usd or eth or w/e via etherex exchange for subcurrency markets
    if(periodLength==0 or len(description)==0 || tradingFee < BRANCHES.getMinTradingFee(branch)):
        return(-1)
    if(tradingFee > 2^61):
        return(-1)
        
    event = events[0]
    # check that events have same exp. dates && branch
    i = 0
    eventNum = len(events)
    # only supports upto 3 dimensional markets
    if(eventNum > 3):
        return(-2)
    numOutcomes = 0
    eventsConcat = 0
    cumulativeScale = 0
    tradingPeriod = 0
    while i < eventNum:
        event = events[i]
        if(i!=0):
            if(event==events[i-1]):
                return(-6)
        expirationDate = EVENTS.getExpiration(event)
        futurePeriod = expirationDate / periodLength
        if(expirationDate < block.timestamp):
            return(-7)
        forkPeriod = BRANCHES.getForkPeriod(branch)
        if(forkPeriod && (futurePeriod == forkPeriod or futurePeriod == (forkPeriod+1))):
            return(-9)
        if(EVENTS.getEventBranch(event) != branch || !INFO.getCreator(event)):
            return(-1)
        # market's trading period is the same as the last expiring event in the market
        if(expirationDate > tradingPeriod):
            tradingPeriod = expirationDate
        eventsConcat += event
        if(!EVENTS.getBond(event)):
            # pay validity / indeterminate protection bond
            period = block.timestamp / TWENTYFOURHR
            validity_bond =  (creationFee * (1 + EVENTS.getPast24(period)) / (1 + EXPEVENTS.getNumberEvents(branch, BRANCHES.getVotePeriod(branch))))/2
            if(!CASH.sendFrom(event, validity_bond, msg.sender)):
                return(-4)
            EVENTS.setBond(event, validity_bond)
            EVENTS.addPast24(period)
        #scalars
        maxValue = EVENTS.getMaxValue(event)
        minValue = EVENTS.getMinValue(event)
        if((maxValue!=TWO || minValue !=ONE) && EVENTS.getNumOutcomes(event)==2):
            # is a valid scalar
            # cumulativeScale is the range of a scalar
            cumulativeScale += maxValue - minValue
        eventNumOutcomes = EVENTS.getNumOutcomes(event)
        if(i==0):
            numOutcomes += eventNumOutcomes
        else:
            numOutcomes *= eventNumOutcomes
        i += 1
    if(numOutcomes > 8):
        return(-3)
    if(cumulativeScale==0):
        cumulativeScale = ONE
    lastExpDate = tradingPeriod
    tradingPeriod = (tradingPeriod / periodLength)

    # formation of marketID (hash)
    marketinfo = string(8*32 + len(description))
    marketinfo[0] = tradingPeriod
    marketinfo[1] = tradingFee
    marketinfo[2] = block.timestamp
    marketinfo[3] = tag1
    marketinfo[4] = tag2
    marketinfo[5] = tag3
    marketinfo[6] = lastExpDate
    marketinfo[7] = len(description)
    mcopy(marketinfo + 8*32, description, chars=len(description))
    marketID = sha3(marketinfo, chars=len(marketinfo))
    MARKETS.addToMarketsHash(branch, marketID)
    CASH.initiateOwner(marketID)
    # pay numOutcomes fee
    # if it's already been created return 0
    if(INFO.getCreator(marketID) || MARKETS.getMarketNumOutcomes(marketID)):
        return(-8)
    if(!BRANCHES.getOracleOnly(branch) && CASH.balance(msg.sender) < creationFee):
        return(-4)
    # need at least 1.2M gas @ gas price to cover resolution + 1M for each additional event + 500k per event to calc. num reports for it
    if(msg.value < (1200000*tx.gasprice + 1000000*tx.gasprice*(eventNum-1) + 500000*eventNum*tx.gasprice)):
        return(0)
    if(CASH.sendFrom(branch, creationFee, msg.sender) && send(MARKETS, (msg.value-500000*eventNum*tx.gasprice)) && INFO.setInfo(marketID, description, msg.sender, creationFee) && BRANCHES.addMarketToBranch(branch, marketID) && MARKETS.initializeMarket(marketID, events, tradingPeriod, tradingFee, branch, tag1, tag2, tag3, makerFees, cumulativeScale, numOutcomes, extraInfo, msg.value-500000*tx.gasprice, creationFee, lastExpDate)):
        i = 0
        while i < len(events):
            EVENTS.addMarket(events[i], marketID)
            expirationDate = EVENTS.getExpiration(event)
            futurePeriod = expirationDate / periodLength
            if(EXPEVENTS.getEvent(branch, futurePeriod, EXPEVENTS.getEventIndex(futurePeriod, events[i]))!=events[i]):
                EXPEVENTS.addEvent(branch, futurePeriod, events[i], 500000*tx.gasprice)
                # cost for calculating num. of reports for an event
                CASH.send(EXPEVENTS, 500000*tx.gasprice)
            i += 1
        return(marketID)
    else:
        return(0)

def updateTradingFee(branch, market, tradingFee):
    refund()
    if(msg.sender != INFO.getCreator(market) || tx.origin != INFO.getCreator(market)):
        return(-4)
    oldFee = MARKETS.getTradingFee(market)
    oldCreationFee = POINTZEROSIX * BRANCHES.getBaseReporters(branch) * ONE / oldFee
    newCreationFee = POINTZEROSIX * BRANCHES.getBaseReporters(branch) * ONE / tradingFee
    if(tradingFee < BRANCHES.getMinTradingFee(branch) or tradingFee > oldFee):
        return(-1)
    CASH.sendFrom(branch, newCreationFee-oldCreationFee, msg.sender)
    return(MARKETS.setTradingFee(market, tradingFee))

# Anyone can post an "Early Resolution Bond"
# This bond is equal to 0.5 * Market_Fee * Market_Value
# This amount is the amount needed to pay the reporters in case this was frivolous.
# The market goes up for early resolution and reporters place claim to what is truth, however for early resolution, they have an additional option: 'Market is not ready to resolve'
    # this addl option is just the normal indeterminate (except here it's a bit of a special case, see below)
# In the event 'Market is not ready to resolve' is found to be the consensus, the early resolution bond is paid to the reporters for their labor.
    # and market remains with old expiration dateevent
# In the event any other option is found to be the consensus the early resolution bond is returned to the poster and then resolution is handled just like any other case.
def pushMarketForward(branch, market):
    refund()
    # can't do while forking
    forkPeriod = BRANCHES.getForkPeriod(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    currentPeriod = block.timestamp / periodLength
    if(forkPeriod == currentPeriod or currentPeriod == (forkPeriod+1)):
        return(-1)
    numEvents = MARKETS.getNumEvents(market)
    # if market closed or already pushed forward, return 0
    if(MARKETS.getOneWinningOutcome(market, 0) or MARKETS.getPushedForward(market)):
        return(-2)
    if(CASH.sendFrom(market, numEvents*MARKETS.getTradingFee(market)*MARKETS.getTotalSharesPurchased(market)/(2*ONE), msg.sender)==0):
        return(-3)
    i = 0
    events = array(3)
    # for each event in market
    while i < numEvents:
        events[i] = MARKETS.getMarketEvent(market, i)
        expiration = EVENTS.getExpiration(events[i])
        if(EVENTS.getRejectedPeriod(events[i]) || expiration!=EVENTS.getOriginalExpiration(events[i]) || EVENTS.getOutcome(events[i]) || BACKSTOPS.getRoundTwo(events[i]) || expiration/periodLength==block.timestamp/periodLength):
            return(-4)
        i += 1
    i = 0
    while i < numEvents:
        # push into next vote period
        period = BRANCHES.getVotePeriod(branch)
        # figure out what's going on with subsidy system here
        EXPEVENTS.addEvent(branch, period+1, events[i], 0)
        # set event expiration date to be after the current reporting period ends
        EVENTS.setExpiration(events[i], block.timestamp)
        MARKETS.setTradingPeriod(market, period+1)
        MARKETS.setPushedForward(market, 1, msg.sender)
        EVENTS.setEventPushedUp(events[i], 1)
        i += 1
    return(1)