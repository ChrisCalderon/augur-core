import cash as CASH
import branches as BRANCHES
import expiringEvents as EXPEVENTS
import consensusData as CONSENSUS
import reporting as REPORTING
inset('refund.se')


# -2: needs to be second half of reporting period to claim rep [1st half is when redistribution is done]
    # after this window, any unclaimed rep is pushed to the next period's redistrib. pool via the first make report submission
# 2 means no errors but didnt report
def collectFees(branch, sender):
    refund()
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    if(residual <= periodLength/2):
        return(-2)
    if(!CONSENSUS.getRRDone(branch, sender)):
        # need to call penalize for all events and penalize for too lazy to report or catchup if necessary
        return(-1)
    lastPeriod = BRANCHES.getVotePeriod(branch) - 1
    # todo make so need 1 rep to claim fees
    if(!CONSENSUS.getFeesCollected(branch, sender, lastPeriod) && EXPEVENTS.getNumReportsActual(branch, lastPeriod, sender)):
        newRep = EXPEVENTS.getAfterRep(branch, lastPeriod, sender)
        denominator = CONSENSUS.getDenominator(branch, lastPeriod)
        if(!CONSENSUS.getFeeFirst(branch, lastPeriod)):
            CONSENSUS.setFeeFirst(branch, lastPeriod, 1)
            CONSENSUS.setPeriodBalance(branch, lastPeriod, REPORTING.getRepBalance(branch, branch))
        gainedRep = newRep * CONSENSUS.getPeriodBalance(branch, lastPeriod) / denominator
        #if(lostRep) newRep should be == EXPEVENTS.getAfterRep(branch, period, sender) + gainedRep
        #if(gainedRep) newRep should be == EXPEVENTS.getBeforeRep(branch, period, sender) + gainedRep
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, sender), gainedRep)
        REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, branch), gainedRep)
        cash = BRANCHES.getInitialBalance(branch, lastPeriod) * newRep / denominator
        CASH.addCash(sender, cash)
        CASH.subtractCash(branch, cash)
        CONSENSUS.setFeesCollected(branch, sender, lastPeriod)
        # return not reported enough bond if not enough penalized is 0 or BRANCHES.getForkPeriod(branch)+1 == lastPeriod during collect fees
        if(CONSENSUS.getNotEnoughPenalized(branch, msg.sender, lastPeriod)==0 or BRANCHES.getForkPeriod(branch)+1 == lastPeriod):
            CONSENSUS.doRefund(msg.sender, msg.sender)
        return(1)
    elif(!CONSENSUS.getFeesCollected(branch, sender, lastPeriod)):
        CONSENSUS.setFeesCollected(branch, sender, lastPeriod)
        return(2)