
#Notes:
    #Anyone can pay some amount significantly greater than the bond amount to force a branching event, splitting rep into two classes.  
    #In one class the reported outcome for whatever event was the cause of dispute is said to be right, and rep is redistributed accordingly.  
    #In the other class/branch, the event is readjudicated and remove the outcome on the pre fork branch and rep is redistributed as normal, except people who said the original outcome in the original fork lose rep.  
    # Note: Whichever outcome was truly the correct one would determine which branch had rep that actually held value.  This would be akin to a Bitcoin hard fork scenario.  The winning fork, of course, would be the one with the most voluminous markets, which would be determined by the fork that represented reality, which would have a higher market cap.  Markets go to the most popular fork by default after 2 months.

import info as INFO
import cash as CASH
import branches as BRANCHES
import reporting as REPORTING
import events as EVENTS
import markets as MARKETS
import backstops as BACKSTOPS
import sendReputation as SENDREP
import roundTwo as ROUNDTWO
import expiringEvents as EXPEVENTS
import createBranch as CREATEBRANCH
inset('refund.se')

data branch[](denominator[], penalized[][](event[], num, notEnoughReportsPenalized), penalizedUpTo[], feesCollected[][])

#Notes:
    #Anyone can pay some amount significantly greater than the bond amount to force a branching event, splitting rep into two classes.  
    #In one class the reported outcome for whatever event was the cause of dispute is said to be right, and rep is redistributed accordingly.  
    #In the other class/branch, the event is readjudicated and remove the outcome on the pre fork branch and rep is redistributed as normal, except people who said the original outcome in the original fork lose rep.  
    # Note: Whichever outcome was truly the correct one would determine which branch had rep that actually held value.  This would be akin to a Bitcoin hard fork scenario.  The winning fork, of course, would be the one with the most voluminous markets, which would be determined by the fork that represented reality, which would have a higher market cap.  Markets go to the most popular fork by default after 2 months.

# todo move to backstops data_api
# branch and forkperiod and who won
data forkResolved[][]
data eventMoved[]
data forkData[](originalBranch)
data forking[](bondPoster)
data bondPaid[]
data forkedOverEthicality[]
data bondAmount[]

def getForkBondPoster(event):
    return(self.forking[event].bondPoster)

def getForkedOverEthicality(event):
    return(self.forkedOverEthicality[event])
    
def getBondPaid(event):
    return(self.bondPaid[event])

def getBondAmount(event):
    return(self.bondAmount[event])



# Period where we forked, at the end of it
    # don't penalize for this period / anything that happened here should be considered to not have happened - done
    # let period be incremented as normal - done
    # no rbcr on this period besides for event forked over on original. parent but don't actually resolve the event until later per below - done
    # fork users get a free pass for not reporting on this period - done
# Period after fork where we need to do nothing while waiting for fork to resolve
    # free pass for not reporting during this period in og branch - done
    # no reporting or rbcr in this period except for on fork branch we re-report on the forked market and that's it, so no free pass on fork for that one event - done
# Period after fork is resolved
    # markets can't be moved until now - done
    # all markets have early exp disabled until this point - done
    # each event which should've resolved in the past 2 periods and this one is pushed up into period after this - done
        # stays in parent if it wins, otherwise goes to new fork - done
    # each event resolving further in the future is pushed into the respective period on whichever fork wins - done
def move_event(event):
    forkPeriod = BRANCHES.getForkPeriod(EVENTS.getEventBranch(event))
    branch = EVENTS.getEventBranch(event)
    eventForkedOver = BRANCHES.getEventForkedOver(branch)
    currentPeriod = block.timestamp / BRANCHES.getPeriodLength(branch)
    if(forkPeriod && currentPeriod == (forkPeriod+2) && !EVENTS.getOutcome(event) && !self.eventMoved[event]):
        winner = self.forkResolved[branch][forkPeriod]
        if(winner==0):
            winner = self.resolve_fork(branch)
        EVENTS.setBranch(event, winner)
        self.eventMoved[event] = 1
        if(event == eventForkedOver):
            return(1)
        elif(winner == EVENTS.getEventBranch(event)):
            # set outcomes to 0
            EVENTS.setOutcome(event, 0)
            EVENTS.setmode(event, 0)
            EVENTS.setEthics(event, 0)
            EVENTS.setUncaughtOutcome(event, 0)
            # return bond if it's a round 2 event and make it not one anymore
            ROUNDTWO.roundTwoResolve(branch, event, eventIndex)
            
            # leave event here
            expPeriod = EVENTS.getExpiration(event)/BRANCHES.getPeriodLength(branch)
            # if should've resolved in past periods
            if(expPeriod == forkPeriod or expPeriod == (forkPeriod+1) or expPeriod == (forkPeriod+2)):
                # push it into next [this] period
                EXPEVENTS.addEvent(branch, currentPeriod+1, eventID)
                EVENTS.setExpiration(event, block.timestamp)
            # otherwise it's set to expire in the period it would've expired in as normal, no changes needed
        else:
            # set outcomes to 0
            EVENTS.setOutcome(event, 0)
            EVENTS.setmode(event, 0)
            EVENTS.setEthics(event, 0)
            EVENTS.setUncaughtOutcome(event, 0)
            # return bond if it's a round 2 event and make it not one anymore
            ROUNDTWO.roundTwoResolve(branch, event, eventIndex)

            # move event to fork
            expPeriod = EVENTS.getExpiration(event)/BRANCHES.getPeriodLength(branch)
            # and place it into the next reporting period w/ outcomes to 0
            if(expPeriod == forkPeriod or expPeriod == (forkPeriod+1) or expPeriod == (forkPeriod+2)):
                # push it into next [this] period
                EXPEVENTS.addEvent(branch, currentPeriod+1, eventID)
                EVENTS.setExpiration(event, block.timestamp)
            else:
                # push into period it wouldve expired in
                EXPEVENTS.addEvent(branch, expPeriod, eventID)
                # expiration time doesnt need to change
    else:
        return(0)

# parent branch is branch here
def resolve_fork(branch):
    forkPeriod = BRANCHES.getForkPeriod(EVENTS.getEventBranch(event))
    currentPeriod = block.timestamp / BRANCHES.getPeriodLength(branch)
    # make sure branch forked
    if(currentPeriod != (forkPeriod+2)):
        return(0)
    origCap = self.exchangeRate(branch)
    fork = REPORTING.getFork(branch)
    forkCap = self.exchangeRate(fork)
    if(origcap >= forkCap):
        winner = branch
        self.setWinner(branch, winner)
        return(winner)
    else:
        winner = fork
        self.setWinner(branch, winner)
        return(winner)
    
def setWinner(branch, winner):
    self.forkResolved[branch][winner] = winner
    return(1)

#Resolve fork method that gets exchange rate
def exchangeRate(branch):
    # get rep exchange rate from etherex for (branch)
    #return(exchangeRate)
    # for testing we'll just rng the exchange rate :)
    return(sha256(branch))

# In the last 48 hours during period where a round 2 was pushed back to, can be made to fork instead of just round 2, so round 2 bond poster gets bond back
# bond is 1% of rep
# todo make it so can only push back in last 48 hr of _second_ period
# todo pay back bond poster
# todo fork over ethicality or outcome
# round 2 penalize consensus don't pay back reporter b/c bond already returned.. on orig. branch
# todo make sure branch isn't forking when we make a fork...
def fork(event, branch, forkedOverEthicality):
    if(!EVENTS.getRoundTwo(event) || EVENTS.getFinal(event) || EVENTS.getForked(event)):
        return(-1)
    if(EVENTS.getBranch(event)!=branch):
        return(0)
    # if in last 48 hr of period
    if(block.timestamp/BRANCHES.getPeriodLength(branch)!=((block.timestamp + 2*TWENTYFOURHR)/BRANCHES.getPeriodLength(branch)) && EVENTS.getUncaughtOutcome(event)!=0 && !EVENTS.getForked(event)):
        bond = 184467440737095520*REPORTING.getTotalRep(branch)/ONE
        self.bondAmount[branch] = bond
        # lose fork bond in branch 1
        # results same as roundtwobond, let it resolve as that on original network
        if(SENDREP.sendReputation(branch, event, bond)==0):
            return(-2)

        # on branch 2 fork bond isn't lost
        # on fork bond isn't lost, gets paid up to 2x from "liars"
        # make the fork
        newBranch = CREATEBRANCH.createSubbranch(text("fork"), BRANCHES.getPeriodLength(branch), branch, BRANCHES.getMinTradingFee(branch), 0)
        REPORTING.setFork(newBranch)
        period = BRANCHES.getVotePeriod(newBranch)
        EXPEVENTS.setEventRequired(newBranch, period+1, event)
        EXPEVENTS.addEvent(newBranch, period+1, event)
        EVENTS.setExpiration(event, block.timestamp)
        self.forkData[event].originalBranch = branch
        self.forking[event].bondPoster = msg.sender
        EVENTS.setForked(event)
        BACKSTOPS.setFinal(event)
        BRANCHES.setForkPeriod(branch)
        BRANCHES.setForkPeriod(newBranch)
        BRANCHES.setEventForkedOver(newBranch, event)
        BRANCHES.setEventForkedOver(branch, event)
        self.forkedOverEthicality[event] = forkedOverEthicality
        # return round 2 bond
        market = EVENTS.getMarket(event, 0)
        avgAdjCost = BRANCHES.getInitialBalance(branch, period-1)/EXPEVENTS.getNumberEvents(branch, votePeriod-1)
        bond = avgAdjCost + MARKETS.getSharesValue(market)*(184467440737095520 + MARKETS.getTradingFee(market)/2) / 2**64
        bond = min(bond, 200*ONE)
        REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), bond)
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), bond)
    else:
        return(0)

macro scalar($event):
    ((EVENTS.getMaxValue($event)!=TWO || EVENTS.getMinValue($event)!=ONE) && EVENTS.getNumOutcomes($event)==2)
        
macro binary($event):
    (EVENTS.getNumOutcomes($event)==2 and EVENTS.getMaxValue($event)==TWO and EVENTS.getMinValue($event)==ONE)
        
macro categorical($event):
    (EVENTS.getNumOutcomes($event)>2)
    
macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE

macro abs($a):
    if($a<0):
        $a = -$a
    $a
    
# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD
