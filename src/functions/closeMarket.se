# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import cash as CASH
import markets as MARKETS
import events as EVENTS
import closeMarketOne as CLOSEONE
import closeMarketTwo as CLOSETWO
import closeMarketFour as CLOSEFOUR
import closeMarketEight as CLOSEEIGHT
import expiringEvents as EXPEVENTS
import backstops as BACKSTOPS
import eventResolution as RESOLVE
inset('refund.se')

# first param is the market, second param is the subcurrency contract
data cash[][]

macro YES: TWO
macro NO: ONE
macro BAD: 3 * ONEHALF

macro CATCH_TOLERANCE: ONE / 10

event thru(user:indexed, time)

# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD

macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE

# loop through events in the market, get their outcomes && use those to determine the winning events!
# distribute coins among winning events
# @return 0 if fail/trading not over yet/event not expired or closed already, if success 1
# Error messages otherwise
    # -1: Market has no cash anyway / already closed
    # -2: 0 outcome / not reported on yet
    # -3: not final round 2 event
    # -5: Event forked and not final yet
    # -6: bonded pushed forward market not ready to be resolved
    # -7: event not reportable >.99
    # -8: market isn't in branch
# if market's events have moved due to a fork branch is the new fork
def closeMarket(branch, market, sender):
    refund()
    if(MARKETS.getBranchID(market)!=branch):
        return(-8)
    if(CASH.balance(market)<=0):
        return(-1)
    numberEvents = MARKETS.getNumEvents(market)
    tradingPeriod = MARKETS.getTradingPeriod(market)
    period = BRANCHES.getVotePeriod(branch)
    events = array(3)
    events = MARKETS.getMarketEvents(market, outitems=3)
    i = 0
    reportingDone = 0
    resolved = 1
    while i < numberEvents:
        if(EVENTS.getOutcome(events[i])==0 && EVENTS.getmode(events[i])==0):
            resolved = 0
            i = numberEvents
        i += 1
    i = 0
    while i < numberEvents:
        numReports = EXPEVENTS.getNumReportsEvent(branch, EVENTS.getExpiration(events[i])/BRANCHES.getPeriodLength(branch), events[i])
        numExpected = EXPEVENTS.getNumReportsExpectedEvent(branch, EVENTS.getExpiration(events[i])/BRANCHES.getPeriodLength(branch), events[i])
        if(numReports == numExpected && numReports!=0 && numExpected!=0):
            reportingDone = 1
            i = numberEvents
        i += 1
    if((period > tradingPeriod || reportingDone) && !resolved):
        # loop through events in the market, get their outcomes && use those to determine the winning events!
        n = 0
        outcomeSix = 0
        while n < numberEvents:
            votingPeriodEvent = EVENTS.getExpiration(events[n])/BRANCHES.getPeriodLength(branch)
            fxpOutcome = EVENTS.getOutcome(events[n])
            resolution = 1
            if(EVENTS.getUncaughtOutcome(events[n])==0):
                return(-2)
            if(BACKSTOPS.getRoundTwo(event) && !BACKSTOPS.getFinal(event)):
                return(-3)
            forkPeriod = BRANCHES.getForkPeriod(EVENTS.getEventBranch(events[n]))
            currentPeriod = block.timestamp / BRANCHES.getPeriodLength(branch)
            if((EVENTS.getForked(event) && !EVENTS.getForkedDone(event)) or (currentPeriod <= (forkPeriod+1))):
                return(-5)
            if(binary(events[n]) && fxpOutcome==0):
                    resolution = RESOLVE.resolveBinary(events[n], market, branch, votingPeriodEvent)
            elif(scalar(events[n]) && EVENTS.getmode(events[n])==0):
                    resolution = RESOLVE.resolveCategoricalOrScalar(EVENTS.getMinValue(events[n]), EVENTS.getMaxValue(events[n]), events[n], market, branch, votingPeriodEvent)
            elif(categorical(events[n]) && EVENTS.getmode(events[n])==0):
                    resolution = RESOLVE.resolveCategoricalOrScalar(ONE, ONE*EVENTS.getNumOutcomes(events[n]), events[n], market, branch, votingPeriodEvent)
            if(resolution==-6):
                outcomeSix = 1
            n += 1
        if(outcomeSix):
            return(-6)
        winningOutcomes = array(8)
        winningOutcomes = RESOLVE.determineWinningOutcomes(events, numberEvents, branch, market, outitems=8)
        MARKETS.setWinningOutcomes(market, winningOutcomes)
        MARKETS.refundClosing(MARKETS.getgasSubsidy(market), sender)
        return(1)
    else:
        return(0)

# claim winnings after a market is resolved
# @return 1 if success
# Errors:
    # 0: reporting not done
    # -1: trader doesn't exist
def claimProceeds(branch, market):
    refund()
    if(MARKETS.getBranchID(market)!=branch):
        return(-8)
    numberEvents = MARKETS.getNumEvents(market)
    tradingPeriod = MARKETS.getTradingPeriod(market)
    period = BRANCHES.getVotePeriod(branch)
    events = array(3)
    events = MARKETS.getMarketEvents(market, outitems=3)
    i = 0
    reportingDone = 1
    resolved = 1
    while i < numberEvents:
        numReports = EXPEVENTS.getNumReportsEvent(branch, EVENTS.getExpiration(events[i])/BRANCHES.getPeriodLength(branch), events[i])
        numExpected = EXPEVENTS.getNumReportsExpectedEvent(branch, EVENTS.getExpiration(events[i])/BRANCHES.getPeriodLength(branch), events[i])
        if(EVENTS.getOutcome(events[i])==0 && EVENTS.getmode(events[i])==0):
            resolved = 0
        if(numReports != numExpected && numReports!=0 and numExpected!=0):
            reportingDone = 0
            i = numberEvents
        i += 1
    if((period > tradingPeriod || reportingDone) && resolved):
        winningOutcomes = array(8)
        winningOutcomes = MARKET.getWinningOutcomes(market, outitems=8)
        outcome = 0
        # market not resolved
        if(winningOutcomes[0]==0):
            return(0)
        if(winningOutcomes[1]==0):
            minval = EVENTS.getMinValue(events[0])
            ethical = ethic_catch(EVENTS.getEthical(events[0]))
            if(len(events)==1 && categorical(events[0]) && (EVENTS.getmode(events[0])==ONEHALF or !ethical)):
                outcome = CLOSEONE.oneOutcome(market, winningOutcomes[0], msg.sender, 1, EVENTS.getNumOutcomes(events[0]))
            else:
                outcome = CLOSEONE.oneOutcome(market, winningOutcomes[0], msg.sender, 0, 0)
        elif(winningOutcomes[7]):
            outcome = CLOSEEIGHT.eightOutcomes(market, winningOutcomes, events, msg.sender)
        elif(winningOutcomes[3]):
            outcome = CLOSEFOUR.fourOutcomes(market, winningOutcomes, events, msg.sender)
        elif(winningOutcomes[1]):
            outcome = CLOSETWO.twoOutcomes(market, winningOutcomes, events, msg.sender)
        return(outcome)
    else:
        return(0)

macro scalar($event):
    ((EVENTS.getMaxValue($event)!=TWO || EVENTS.getMinValue($event)!=ONE) && EVENTS.getNumOutcomes($event)==2)

macro binary($event):
    (EVENTS.getNumOutcomes($event)==2 and ONE*EVENTS.getMaxValue($event)==TWO and EVENTS.getMinValue($event)==ONE)

macro categorical($event):
    (EVENTS.getNumOutcomes($event)>2)