import branches as BRANCHES
import expiringEvents as EXPEVENTS
import consensusData as CONSENSUS
import reporting as REPORTING
import fxpFunctions as FXP
inset('refund.se')

macro ONEPOINTTWO: 22136092888451461120

macro POINTZEROZEROONE: 18446744073709552

macro POINTONE: 1844674407370955264

macro POINTNINE: 16602069666338596864

# Basically, if you don't access the account, the rep just sort of sits there, proverbially speaking, it's burned.  If you access the account, it's sent to the branch's rep account and distributed like trading fees.  To prevent double claiming, similarly to trading fees each rep acc. that hadn't claimed rep or trading fees but reported that past period would neither be able to send nor receive rep until they claimed.  You'd get % of people that reported fees / rep
# Errors:
    # -1: already done
    # -2: not in right part of period
# prove both that a reporter voted on less than he/she actually could have and it was <.5 of what they were predicted to have reported on
# reporters pay an eth bond for this on first report --- if never called by collect fees they get it back else it goes back to pay someone who correctly calls this function --- return bond if not enough penalized is 0 or BRANCHES.getForkPeriod(branch)+1 == lastPeriod during collect fees
def proveReporterDidntReportEnough(branch, reporter, eventExample):
    refund()
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    if(CONSENSUS.getNotEnoughPenalized(branch, reporter, lastPeriod)):
        return(-1)
    if(BRANCHES.getForkPeriod(branch)+1 == lastPeriod):
        CONSENSUS.setNotEnoughPenalized(branch, reporter, lastPeriod)
        return(1)
    if(residual > periodLength/2):
        return(-2)
    # events a user should be reporting on
    # eventsExpected == (numberReportEstimate*((reporterList[n]/totalRep)**1.2))
    # a^b=exp(b*ln(a))=e^(b*ln(a)).
    prelim = EXPEVENTS.getNumEventsToReportOn(branch, lastPeriod)
    # need to do active rep on a period by period basis.. todo
    exp = FXP.fx_exp(ONEPOINTTWO*FXP.fx_log(EXPEVENTS.getBeforeRep(branch, lastPeriod, sender))/ONE)*2**64/FXP.fx_exp(ONEPOINTTWO*FXP.fx_log(REPORTING.getActiveRep(branch))/ONE)
    baseReporters = CONSENSUS.getBaseReportersLastPeriod(branch)
    # if total [which is mult by num events to report on via the prelim amount] is too high [>1] then numevents will estimate a higher number than reality, so need to correct for this below
    total = exp*baseReporters
    numEvents = exp*prelim + EXPEVENTS.getNumRequired(branch, lastPeriod)*ONE
    eventsInPeriod = EXPEVENTS.getNumberEvents(branch, lastPeriod)-EXPEVENTS.getNumRemoved(branch, lastPeriod)
    if(repConstant >= POINTZEROONE):
        minimum = min(30+EXPEVENTS.getNumRequired(branch, lastPeriod), eventsInPeriod)
        if(numEvents/ONE < minimum):
            numEvents = minimum*ONE
    # correction for if people have more than x [4.6% of at 40 min reporters] rep in one account - they report on everything (hence incentive to divy rep into mult. accounts and not pool) i.e. if((exp(ln(rep%)*1.2)+0.001)*40 > 1)
    if(total > ONE):
        numEvents = (EXPEVENTS.getNumEventsToReportOn(branch, lastPeriod)/baseReporters)*ONE + EXPEVENTS.getNumRequired(branch, lastPeriod)*ONE
    numReportsActual = EXPEVENTS.getNumReportsActual(branch, lastPeriod, reporter)
    # reporter couldve reported on event example but didnt
    couldveReported = EXPEVENTS.getEventCanReportOn(branch, lastPeriod, reporter, eventExample)
    if(numEvents/2 > numReportsActual*ONE && couldveReported):
        # typically meant for people who did report but not enough [those who didnt at all use pen. catchup] so using before rep is fine, but if not use rep balance
        originalRep = EXPEVENTS.getBeforeRep(branch, lastPeriod, reporter)
        if(originalRep==0):
            originalRep = REPORTING.getRepBalance(branch, reporter)
        # penalize people
        newRep = POINTONE*numReportsActual*originalRep / numEvents
        oldRep = originalRep*POINTNINE / ONE
        repChange = (oldRep+newRep) - originalRep
        if(repChange > 0):
            return(1)
        # removes rep from reporter who lost it
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, reporter), repChange)
        # sends that rep to the branch rep pool
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -repChange)
        EXPEVENTS.setBeforeRep(branch, lastPeriod, oldRep+newRep, reporter)
        afterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, reporter)
        newAfterRep = afterRep + repChange
        if(afterRep==0):
            newAfterRep = oldRep+newRep
        EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, reporter)
        CONSENSUS.setNotEnoughPenalized(branch, reporter, lastPeriod)
        CONSENSUS.doRefund(msg.sender, reporter)
        return(1)
    else:
        return(0)