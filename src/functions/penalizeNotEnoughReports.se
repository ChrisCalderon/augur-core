import branches as BRANCHES
import expiringEvents as EXPEVENTS
import consensus as CONSENSUS
import reporting as REPORTING
import fxpFunctions as FXP
import makeReports as MAKEREPORTS
inset('refund.se')

# Basically, if you don't access the account, the rep just sort of sits there, proverbially speaking, it's burned.  If you access the account, it's sent to the branch's rep account and distributed like trading fees.  To prevent double claiming, similarly to trading fees each rep acc. that hadn't claimed rep or trading fees but reported that past period would neither be able to send nor receive rep until they claimed.  You'd get % of people that reported fees / rep
# Errors:
    # -1: already done
    # -2: hasn't reported this period
def penalizeNotEnoughReports(branch):
    refund()
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    if(CONSENSUS.getNotEnoughPenalized(branch, msg.sender, lastPeriod)):
        return(-1)
    # accounts for if no events in a period
    if(EXPEVENTS.getNumberEvents(branch, lastPeriod)==0):
        CONSENSUS.setNotEnoughPenalized(branch, msg.sender, lastPeriod)
        return(1)
    if(BRANCHES.getForkPeriod(branch)+1 == lastPeriod):
        CONSENSUS.setNotEnoughPenalized(branch, msg.sender, lastPeriod)
        return(1)

    if(!EXPEVENTS.getReportedPeriod(branch, lastPeriod, msg.sender)):
        return(-2)
    if(residual > periodLength/2):
        return(-2)
    numEvents = MAKEREPORTS.getNumEventsToReport(branch, lastPeriod)
    repConstant = REPORTING.getRepBalance(branch, msg.sender)*ONE/REPORTING.getActiveRep(branch)
    logOutput = FXP.fx_log(repConstant)
    exp = FXP.fx_exp(22136092888451461120*logOutput/ONE)
    exp += 18446744073709552
    baseReporters = CONSENSUS.getBaseReportersLastPeriod(branch)
    total = exp*baseReporters
    # correction for if people have more than x [4.6% of at 40 min reporters] rep in one account - they report on everything (hence incentive to divy rep into mult. accounts and not pool) i.e. if((exp(ln(rep%)*1.2)+0.001)*40 > 1)
    if(total > ONE):
        numEvents = (EXPEVENTS.getNumEventsToReportOn(branch, votePeriod)/baseReporters)*ONE + EXPEVENTS.getNumRequired(branch, votePeriod)
    numReportsActual = EXPEVENTS.getNumReportsActual(branch, lastPeriod, msg.sender)
    if(numEvents/(2*ONE) > EXPEVENTS.getNumReportsActual(branch, lastPeriod, msg.sender)):
        originalRep = REPORTING.getRepBalance(branch, msg.sender)
        # penalize people
        # can number reported on be greater than num expected to report on
        newRep = 3689348814741910528*numReportsActual*originalRep / numEvents
        oldRep = originalRep*14757395258967642112 / ONE
        repChange = (oldRep+newRep) - originalRep
        if(repChange > 0):
            return(1)
        # removes rep from reporter who lost it
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), repChange)
        # sends that rep to the branch rep pool
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -repChange)
        EXPEVENTS.setBeforeRep(branch, lastPeriod, oldRep+newRep, msg.sender)
        EXPEVENTS.setAfterRep(branch, lastPeriod, oldRep+newRep, msg.sender)
    CONSENSUS.setNotEnoughPenalized(branch, msg.sender, lastPeriod)
    return(1)