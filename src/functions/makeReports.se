# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import cash as CASH
import events as EVENTS
import markets as MARKETS
import reporting as REPORTING
import backstops as BACKSTOPS
import fxpFunctions as FXP
inset('refund.se')

def makeHash(salt, report, eventID, sender):
    hashInfo = array(4)
    hashInfo[0] = sender
    hashInfo[1] = salt
    hashInfo[2] = report
    hashInfo[3] = eventID
    reportHash = sha256(hashInfo, chars=32*len(hashInfo))
    return(reportHash)

# Error -1: invalid event
# Error -2: not in first half of period [commit part]
def submitReportHash(event, reportHash):
    branch = EVENTS.getBranch(event)
    votePeriod = BRANCHES.getVotePeriod(branch)
    # first report of period, num events not set
    if(EXPEVENTS.getNumEventsToReportOn(branch, votePeriod)==0):
        EXPEVENTS.setNumEventsToReportOn(branch)
        BRANCHES.setInitialBalance(branch, votePeriod, CASH.balance(branch))
    eventIndex = EXPEVENTS.getEventIndex(votePeriod, event)
    eventID = EXPEVENTS.getEvent(branch, votePeriod, eventIndex)
    if(eventIndex==0 && (eventID==0 || event!=eventID)):
        return(-1)
    reportingThreshold = 0
    if(EXPEVENTS.getRequired(event) || EVENTS.getReportingThreshold(event)):
        reportingThreshold = 2**192
    else:
        if(EXPEVENTS.getLesserReportNum(branch, votePeriod, event)==0):
            EXPEVENTS.setLesserReportNum(branch, votePeriod, event, self.calculateReportTargetForEvent(branch, event, votePeriod, msg.sender))
        reportingThreshold = EXPEVENTS.calculateReportingThreshold(branch, event, votePeriod, msg.sender)
    x = array(1)
    x[0] = msg.sender + event
    # div by ONE b/c is out of 2**192 rather than 2**256 [to avoid looping around]
    shaHash = sha3(x, items=1)/ONE
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    if(residual <= periodLength/2 && shaHash <= reportingThreshold):
        if(EXPEVENTS.getReportHash(branch, votePeriod, msg.sender, event)==0):
            EXPEVENTS.addReportExpected(branch, votePeriod, event)
        EXPEVENTS.setReportHash(branch, votePeriod, msg.sender, reportHash, event)
        return(1)
    return(-2)

# @return 1 if success
# Error messages
    # 0: reporter doesn't exist or has <.5 rep
    # -1: has already reported
    # -2: not in second half of period [reveal part]
    # -3: hash doesn't match
    # -4: bad report
    # -5: invalid event
    # -6: already resolved
    # -7: <48 hr left in period, too late to report, able to put up readj. bonds though
def submitReport(event, salt, report, ethics):
    branch = EVENTS.getBranch(event)
    balance = REPORTING.getRepBalance(branch, msg.sender)
    if(balance<ONEHALF):
        return(0)
    votePeriod = BRANCHES.getVotePeriod(branch)
    if(EXPEVENTS.getReport(branch, votePeriod, event, msg.sender)):
        return(-1)
    eventIndex = EXPEVENTS.getEventIndex(votePeriod, event)
    # makes sure event is in the given branch and vote period
    eventID = EXPEVENTS.getEvent(branch, votePeriod, eventIndex)
    if(eventIndex==0 && (eventID==0 || event!=eventID)):
        return(-5)
    elif(EVENTS.getOutcome(event)!=0):
        return(-6)
    periodLength = BRANCHES.getPeriodLength(branch)
    # commented out for testing
    #if(block.timestamp/periodLength!=((block.timestamp + 2*TWENTYFOURHR)/periodLength)):
    #    return(-7)
    residual = block.timestamp % periodLength
    if(residual > periodLength/2):
        realHash = EXPEVENTS.getReportHash(branch, votePeriod, msg.sender, event)
        if(self.makeHash(salt, report, eventID, msg.sender)!=realHash || realHash==0):
            return(-3)
        # forkedOverEthicality = FORKING.getForkedOverEthicality(event)
        forkedOverThisEvent = 0
        if(BRANCHES.getEventForkedOver(branch) == event):
            forkedOverThisEvent = 1
        roundTwo = BACKSTOPS.getRoundTwo(event)
        report = self.validateReport(event, branch, votePeriod, report, forkedOverEthicality, forkedOverThisEvent, roundTwo, balance)
        if(report == -4):
            return(-4)
        EXPEVENTS.setReport(branch, votePeriod, eventID, report, msg.sender)
        # set ethics value for event
        ethics = ethics
        if(ethics!=ONE || ethics!=0):
            ethics = ONE
        if(forkedOverThisEvent):
            # fork remove ethicality option if was forked over ethicality, other ethicality choice is the ethicality
            if(forkedOverEthicality):
                oldEthical = ethic_catch(EVENTS.getEthical(event))
                if(oldEthical == ONE):
                    ethics = 0
                else:
                    ethics = ONE
            EXPEVENTS.setEthicReport(branch, votePeriod, event, ethics, msg.sender)
            ethics = (EVENTS.getForkEthicality(event)*EXPEVENTS.getRepEvent(branch, votePeriod, event) + ethics*balance) / (EXPEVENTS.getRepEvent(branch, votePeriod, event) + balance)
            EVENTS.setForkEthicality(event, ethics)
        else:
            EXPEVENTS.setEthicReport(branch, votePeriod, event, ethics, msg.sender)
            if(roundTwo):
                ethics = (EVENTS.getEthics(event)*EXPEVENTS.getRepEvent(branch, votePeriod, event) + ethics*balance) / (EXPEVENTS.getRepEvent(branch, votePeriod, event) + balance)
            else:
                ethics = (EVENTS.getEthics(event)*EXPEVENTS.getNumReportsEvent(branch, votePeriod, event) + ethics) / (EXPEVENTS.getNumReportsEvent(branch, votePeriod, event) + 1)
            EVENTS.setEthics(eventID, ethics)
        EXPEVENTS.addReportToEvent(branch, votePeriod, eventID, msg.sender)
        EXPEVENTS.addRepEvent(branch, votePeriod, event, EXPEVENTS.getBeforeRep(branch, period, msg.sender))
        # if 1st report of the period for a reporter
        if(!EXPEVENTS.getReportedPeriod(branch, votePeriod, msg.sender)):
            dormantRep = REPORTING.balanceOf(branch, msg.sender)
            # Record rep at start of report period
            EXPEVENTS.setBeforeRep(branch, votePeriod, balance, msg.sender)
            EXPEVENTS.setAfterRep(branch, votePeriod, balance, msg.sender)
            EXPEVENTS.setPeriodDormantRep(branch, votePeriod, dormantRep, msg.sender)
            EXPEVENTS.setReportedPeriod(branch, votePeriod, msg.sender)
        return(1)
    return(-2)

# validates and submits report
# weights reports by rep if round 2 and fork
def validateReport(eventID, branch, votePeriod, report, forkedOverEthicality, forkedOverThisEvent, roundTwo, balance):
    outcome = 0
    # binary
    if(EVENTS.getNumOutcomes(eventID)==2 and EVENTS.getMaxValue(eventID)==TWO && EVENTS.getMinValue(eventID)==ONE):
        if(report>2*ONE or report<ONE or report==0):
            return(-4)
        # outcome is calculated as we go along on a report by report basis (i.e. lazily evaluating things)
        elif(forkedOverThisEvent):
            # in case of fork remove the original outcome as a possible response if didn't fork over ethics
            if(!forkedOverEthicality && report == catch(EVENTS.getUncaughtOutcome(eventID))):
                return(-4)
            outcome = (EVENTS.getForkOutcome(eventID)*EXPEVENTS.getRepEvent(branch, votePeriod, eventID) + report*balance) / (EXPEVENTS.getRepEvent(branch, votePeriod, eventID) + balance)
            EVENTS.setForkOutcome(eventID, outcome)
        else:
            if(roundTwo):
                outcome = (EVENTS.getUncaughtOutcome(eventID)*EXPEVENTS.getRepEvent(branch, votePeriod, eventID) + report*balance) / (EXPEVENTS.getRepEvent(branch, votePeriod, eventID) + balance)
            else:
                outcome = (EVENTS.getUncaughtOutcome(eventID)*EXPEVENTS.getNumReportsEvent(branch, votePeriod, eventID) + report) / (EXPEVENTS.getNumReportsEvent(branch, votePeriod, eventID) + 1)
            EVENTS.setUncaughtOutcome(eventID, outcome)
    # scalar or categorical
    else:
        if(report > ONE):
            report = ONE
        elif(report<=0):
            # 1 is the new 0
            report = 1
        # in case of fork remove the original outcome as a possible response if didn't fork over ethics
        if(forkedOverThisEvent):
            if(!forkedOverEthicality && report == EVENTS.getUncaughtOutcome(eventID)):
                return(-4)
            # outcome (uncaught and mode) is calculated as we go along on a report by report basis (i.e. lazily evaluating things)
            EXPEVENTS.addToWeightOfReport(votePeriod, eventID, report, balance)
            if(EXPEVENTS.getWeightOfReport(votePeriod, eventID, report) > EXPEVENTS.getCurrentModeItems(votePeriod, eventID)):
                EXPEVENTS.setCurrentMode(votePeriod, event, report)
                EXPEVENTS.setCurrentModeItems(votePeriod, eventID, report)
            outcome = EXPEVENTS.getCurrentMode(votePeriod, eventID)
            EVENTS.setForkOutcome(eventID, outcome)
        else:
            if(roundTwo):
                # outcome (uncaught and mode) is calculated as we go along on a report by report basis (i.e. lazily evaluating things)
                EXPEVENTS.addToWeightOfReport(votePeriod, eventID, report, balance)
                if(EXPEVENTS.getWeightOfReport(votePeriod, eventID, report) > EXPEVENTS.getCurrentModeItems(votePeriod, eventID)):
                    EXPEVENTS.setCurrentMode(votePeriod, event, report)
                    EXPEVENTS.setCurrentModeItems(votePeriod, eventID, report)
                outcome = EXPEVENTS.getCurrentMode(votePeriod, eventID)
            else:
                # outcome (uncaught and mode) is calculated as we go along on a report by report basis (i.e. lazily evaluating things)
                EXPEVENTS.addToWeightOfReport(votePeriod, eventID, report, 1)
                if(EXPEVENTS.getWeightOfReport(votePeriod, eventID, report) > EXPEVENTS.getCurrentModeItems(votePeriod, eventID)):
                    EXPEVENTS.setCurrentMode(votePeriod, event, report)
                    EXPEVENTS.setCurrentModeItems(votePeriod, eventID, report)
                outcome = EXPEVENTS.getCurrentMode(votePeriod, eventID)
            EVENTS.setUncaughtOutcome(eventID, outcome)
    return(report)

### Helper functions:
def calculateReportTargetForEvent(branch, eventID, votePeriod, sender):
    numMarkets = EVENTS.getNumMarkets(eventID)
    if(numMarkets>25):
        numMarkets = 25
    markets = array(numMarkets)
    markets = EVENTS.getMarkets(eventID, outitems=numMarkets)
    totalFees = 0
    shareValue = 0
    i = 0
    while i < numMarkets:
        shareValue += MARKETS.getSharesValue(markets[i])
        totalFees += MARKETS.getFees(markets[i])
        i += 1
    totalVal = EXPEVENTS.getShareValue(branch, votePeriod)
    shareFraction = shareValue*ONE/totalVal
    numReportersOnMarket = BRANCHES.getBaseReporters(branch)*((-(267*shareFraction**2)/(2*ONE) + (533*shareFraction)/2 + 1*ONE))
    totalFeesInWei = totalFees * WEITOETH / ONE
    canPayForThisManyReporters = totalFeesInWei/(3500000*tx.gasprice)
    lesser = max(canPayForThisManyReporters*ONE, numReportersOnMarket)
    EXPEVENTS.refundCost(sender, EXPEVENTS.getSubsidy(branch, votePeriod, eventID))
    return(lesser)

# eventsExpected == (numberReportEstimate*((reporterList[n]/totalRep)**1.2+.001))
    # a^b=exp(b*ln(a))=e^(b*ln(a)).
# returns num events to report on in fxp
def getNumEventsToReport(branch, votePeriod):
    prelim = EXPEVENTS.getNumEventsToReportOn(branch, votePeriod)
    repConstant = REPORTING.getRepBalance(branch, msg.sender)*ONE/REPORTING.getActiveRep(branch)
    logOutput = FXP.fx_log(repConstant)
    exp = FXP.fx_exp(22136092888451461120*logOutput/ONE) + 18446744073709552
    total = exp*prelim + EXPEVENTS.getNumRequired(branch, votePeriod)*ONE
    eventsInPeriod = EXPEVENTS.getNumberEvents(branch, expDateIndex)-EXPEVENTS.getNumRemoved(branch, votePeriod)
    minimum = min(30+EXPEVENTS.getNumRequired(branch, votePeriod), eventsInPeriod)
    if(total/ONE < minimum):
        total = minimum*ONE
    return(total)
    
macro YES: TWO
macro NO: ONE
macro BAD: 3 * ONEHALF
macro CATCH_TOLERANCE: ONE / 10

# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD
        
macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE