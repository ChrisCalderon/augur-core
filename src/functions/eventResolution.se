import branches as BRANCHES
import info as INFO
import cash as CASH
import markets as MARKETS
import events as EVENTS
import expiringEvents as EXPEVENTS
inset('refund.se')

macro YES: TWO
macro NO: ONE
macro BAD: 3 * ONEHALF
macro CATCH_TOLERANCE: ONE / 10

# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD

macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE

macro scalar($event):
    ((EVENTS.getMaxValue($event)!=TWO || EVENTS.getMinValue($event)!=ONE) && EVENTS.getNumOutcomes($event)==2)

def catch(x):
    refund()
    return(catch(x))

## helper functions:
macro closeOut($event, $market, $branch, $votingPeriodEvent, $fxpOutcome, $periodLength, $ethical, $scalarorcat, $mode, $ethicOutcome):
    # In the $event 'Market is not ready to resolve' is found to be the consensus, the early resolution bond is paid to the reporters for their labor.
    # and $market remains with old expiration date
    # UI needs to call penalizeWrong for ones that are pushed back in both pushed back period and regular period with actual reporting
    $indeterminate = ONEHALF*3
    if(($fxpOutcome == $indeterminate or $mode==ONEHALF) && EVENTS.getEventPushedUp($event)):
        if(MARKETS.getPushedForward($market)):
            CASH.addCash($branch, MARKETS.getTradingFee($market)*MARKETS.getTotalSharesPurchased($market)/(2*ONE))
            CASH.subtractCash($market, MARKETS.getTradingFee($market)*MARKETS.getTotalSharesPurchased($market)/(2*ONE))
        MARKETS.setTradingPeriod($market, MARKETS.getOriginalTradingPeriod($market))
        MARKETS.setPushedForward($market, 0, msg.sender)
        EXPEVENTS.setNumReportsExpectedEvent($branch, $votingPeriodEvent, $event, 0)
        EXPEVENTS.setNumReportsEvent($branch, $votingPeriodEvent, $event, 0)
        #set outcome to 0
        EVENTS.setOutcome($event, 0)
        EVENTS.setmode($event, 0)
        EVENTS.setEthics($event, 0)
        #set uncaughtoutcome to 0
        EVENTS.setUncaughtOutcome($event, 0)
        EVENTS.setEventPushedUp($event, 0)
        # need to store which period it was "rejected" in
        EVENTS.setRejected($event, EVENTS.getExpiration($event)/$periodLength)
        #set $event expiration to be the old date
        EVENTS.setExpiration($event, EVENTS.getOriginalExpiration($event))
        -6
    elif(($fxpOutcome==$indeterminate or $mode==ONEHALF) || !$ethical):
        # give $event bond money to reporters
        CASH.subtractCash($event, EVENTS.getBond($event))
        CASH.addCash($branch, EVENTS.getBond($event))
        # not $ethical is same as .5 outcome
        if($scalarorcat):
            # mode is used to compare for reporting acc. so still the same as reported outcome, but resolving the market as .5
            EVENTS.setOutcome($event, $ethicOutcome)
        else:
            EVENTS.setOutcome($event, $indeterminate)
        1
    else:
        # return bond
        CASH.subtractCash($event, EVENTS.getBond($event))
        CASH.addCash(INFO.getCreator($event), EVENTS.getBond($event))
        if(MARKETS.getPushedForward($market)):
            CASH.addCash(MARKETS.getBondsMan($market), MARKETS.getTradingFee($market)*MARKETS.getTotalSharesPurchased($market)/(2*ONE))
            CASH.subtractCash($market, MARKETS.getTradingFee($market)*MARKETS.getTotalSharesPurchased($market)/(2*ONE))
        if(EVENTS.getEventPushedUp($event)):
            # delete old $event from future events exp
            $period = EVENTS.getOriginalExpiration($event)/$periodLength
            EXPEVENTS.removeEvent($branch, $period)
            EXPEVENTS.deleteEvent($branch, $period, $event)
        1

def resolveBinary(event, market, branch, votingPeriodEvent):
    refund()
    fxpOutcome = catch(EVENTS.getUncaughtOutcome(event))
    periodLength = BRANCHES.getPeriodLength(branch)
    ethical = ethic_catch(EVENTS.getEthical(event))
    EVENTS.setOutcome(event, fxpOutcome)
    EVENTS.setEthics(event, ethical)
    val = closeOut(event, market, branch, votingPeriodEvent, fxpOutcome, periodLength, ethical, 0, 0, 0)
    return(val)

def resolveCategoricalOrScalar(scaled_min, scaled_max, event, market, branch, votingPeriodEvent):
    refund()
    mode = EVENTS.getUncaughtOutcome(event)
    EVENTS.setmode(event, mode)
    fxpOutcome = mode * (scaled_max - scaled_min)/ONE + scaled_min
    EVENTS.setOutcome(event, fxpOutcome)
    periodLength = BRANCHES.getPeriodLength(branch)
    ethical = ethic_catch(EVENTS.getEthical(event))
    ethicOutcome = 2**63 * (scaled_max - scaled_min)/ONE + scaled_min
    EVENTS.setEthics(event, ethical)
    val = closeOut(event, market, branch, votingPeriodEvent, fxpOutcome, periodLength, ethical, 1, mode, ethicOutcome)
    return(val)

def determineWinningOutcomes(events: arr, numberEvents, branch, market):
    refund()
    n = 0
    winningOutcomes = array(8)
    while n < numberEvents:
        fxpOutcome = EVENTS.getOutcome(events[n])
        outcome = fxpOutcome/ONE
        if(n==0):
            #scalar or .5
            if(scalar(events[n]) || fxpOutcome==3*ONEHALF):
                winningOutcomes[0] = 1
                winningOutcomes[1] = 2
            # anything besides scalar or .5
            else:
                winningOutcomes[0] += outcome
        elif(n==1):
            if(scalar(events[n]) || fxpOutcome==3*ONEHALF):
                # scalar, scalar
                if(winningOutcomes[1]):
                    winningOutcomes[2] = 3
                    winningOutcomes[3] = 4
                # nonscalar, scalar
                else:
                    #winningOutcomes[0] = winningOutcomes[0]
                    winningOutcomes[1] = winningOutcomes[0] + EVENTS.getNumOutcomes(events[n-1])
            # scalar, nonscalar
            elif(winningOutcomes[1]):
                winningOutcomes[0] += EVENTS.getNumOutcomes(events[n-1])*(outcome-1)
                winningOutcomes[1] += EVENTS.getNumOutcomes(events[n-1])*(outcome-1)
            # nonscalar, nonscalar
            else:
                winningOutcomes[0] += EVENTS.getNumOutcomes(events[n-1])*(outcome-1)
        elif(n==2):
            if(scalar(events[n]) || fxpOutcome==3*ONEHALF):
                #scalar, scalar, scalar
                if(winningOutcomes[3]):
                    winningOutcomes[4] = 5
                    winningOutcomes[5] = 6
                    winningOutcomes[6] = 7
                    winningOutcomes[7] = 8
                #scalar, nonscalar, scalar
                #nonscalar, scalar, scalar
                elif(winningOutcomes[1]):
                    #winningOutcomes[0] = winningOutcomes[0]
                    #winningOutcomes[1] = winningOutcomes[1]
                    winningOutcomes[2] += winningOutcomes[0] + EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1])
                    winningOutcomes[3] += winningOutcomes[1] + EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1])
                #nonscalar, nonscalar, scalar
                elif(winningOutcomes[1]==0):
                    #winningOutcomes[0] = winningOutcomes[0]
                    winningOutcomes[1] += winningOutcomes[0] + EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1])
            else:
                #scalar, scalar, nonscalar
                if(winningOutcomes[3]):
                    winningOutcomes[0] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                    winningOutcomes[1] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                    winningOutcomes[2] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                    winningOutcomes[3] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                #scalar, nonscalar, nonscalar
                #nonscalar, scalar, nonscalar
                elif(winningOutcomes[1]):
                    winningOutcomes[0] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                    winningOutcomes[1] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                #nonscalar, nonscalar, nonscalar
                else:
                    winningOutcomes[0] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
        n+=1
    return(winningOutcomes: arr)