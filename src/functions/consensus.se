import reporting as REPORTING
import branches as BRANCHES
import expiringEvents as EXPEVENTS
import proportionCorrect as PROPORTION
import events as EVENTS
import backstops as BACKSTOPS
import closeMarket as CLOSEMARKET
import consensusData as CONSENSUS

inset('refund.se')

event penalize(user:indexed, outcome, oldrep, repchange, newafterrep, p, reportValue)

macro POINTZEROONE: 184467440737095520
macro POINTEIGHT: 14757395258967642112
macro POINTTWO: 3689348814741910528

#1. Record rep at start of report period [before rep in make reports]
#2. Penalize for each event
#3. Each reporter needs to do this for all events they reported on, if not get docked
#4. For first half of the new period, people can do penalization for the last period, for the second half users have to claim rep then trading fees
#5. If you don't do it for all events or don't penalize for not reporting enough, autolose 10% rep each period one does this (b/c they're trying to cheat)
# Errors:
    #  0: event is a fork event
    # -1: need to penalize in round 2 penalize function
    # -2: already past first half of new period and needed to penalize before then
    # -4: in fork period only thing that rbcr is done on is the round 2 event in the original branch via round 2 penalize
    # -5: already done for all events in this period
    # -6: forked events should be penalized using the fork penalization function
    # -7: no outcome
# force event to be resolved first if it can be
def penalizeWrong(branch, event):
    refund()
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    forkPeriod = BRANCHES.getForkPeriod(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    newRep = 0
    rejected = EVENTS.getRejected(event)
    newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender)
    oldRep = EXPEVENTS.getBeforeRep(branch, lastPeriod, msg.sender)
    roundTwo = BACKSTOPS.getRoundTwo(event)
    uncaught = EVENTS.getUncaughtOutcome(event)
    if(repBalance < ONE):
        return(0)
    if(CONSENSUS.getPenalizedUpTo(branch, msg.sender)==lastPeriod):
        return(-5)
    if(forkPeriod == lastPeriod):
        return(-4)
    elif(EVENTS.getForked(event)):
        return(-6)
    # if no events in a period
    elif(EXPEVENTS.getNumberEvents(branch, lastPeriod)<=0):
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, lastPeriod)
        CONSENSUS.increaseDenominator(branch, lastPeriod, repBalance)
        return(1)
    elif(roundTwo && outcome!=0):
        return(-1)
    
    # if no outcome / event not resolved yet, resolve it [as long as it wasn't an event that was pushed fwd and got rejected and thus hasn't actually resolved yet]
    elif(!uncaught && !(rejected && EVENTS.getRejectedPeriod(event)==lastPeriod)):
        if(CLOSEMARKET.closeMarket(branch, EVENTS.getMarket(event, 0), msg.sender)!=1):
            return(-7)
    outcome = catch(uncaught)
    if(scalar(event) or categorical(event)):
        outcome = uncaught
    p = PROPORTION.proportionCorrect(event)
    reportValue = EXPEVENTS.getReport(branch, lastPeriod, event, msg.sender)
    numReportedOn = EXPEVENTS.getNumReportsActual(branch, lastPeriod, msg.sender)
    # makes sure we're actually still able to report on the last vote period and that we're in 1st half of current period
    # commented for testing
    #elif(residual > periodLength/2 or (block.timestamp / periodLength - 2)!=lastPeriod):
    #    return(-2)
    # lastperiod is where people who originally voted on a round 2 event voted the first time - want num events penalized to go up but not to actually be penalized for it yet
        # shouldn't be penalized until the next period resolution is over [since it's a round 2 event]
    if(roundTwo && !CONSENSUS.getPenalized(branch, lastPeriod, msg.sender, event) && reportValue):
        CONSENSUS.setPenalized(branch, lastPeriod, msg.sender, event)
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, 1)
        # if a person reported on a round 2 event, they cannot convert their rep to dormant or send rep until they've finished the resolution process for that round 2 event
            # unless this just happened to them last period and they reported correctly then
    # if this event was a pushed forward event that got rejected, don't penalize on it, only penalize on the final reporting, i.e. if appealed don't allow rbcr until after the appeal process is over in the first period
    elif(!CONSENSUS.getPenalized(branch, lastPeriod, msg.sender, event) && reportValue && rejected && EVENTS.getRejectedPeriod(event)==lastPeriod):
        CONSENSUS.setPenalized(branch, lastPeriod, msg.sender, event)
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, 1)
    # penalization on a regular event if not already penalized, it has outcome, and user reported on it
    elif(!CONSENSUS.getPenalized(branch, lastPeriod, msg.sender, event) && reportValue && outcome!=0):
        # wrong
        if(reportValue > outcome+POINTZEROONE or reportValue < outcome-POINTZEROONE):
            if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                diff = reportValue - outcome
                p = -(abs(diff)/2) + ONE
            newRep = oldRep*(2*p - ONE)/ONE
        # right
        else:
            if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                diff = reportValue - outcome
                # perhaps for right we should do diff todo so adds to more than 1 --- can actually do proportion correct for this i think now
                p = -(abs(diff)/2) + ONE
            newRep = oldRep*(2*(ONE-p)**2 / p + ONE)/ONE
        # (1-k) * old rep + k * new rep where k = 0.2 / (number of events you reported on last period) for penalization and pen. rate for forking and backstop 1
        # use .02 as a max penalty per event
        if(numReportedOn<10):
            repChange = oldRep * (ONE - POINTTWO/10)/ONE + newRep*(POINTTWO/10)/ONE - oldRep
        else:
            repChange = oldRep * (ONE - POINTTWO/numReportedOn)/ONE + newRep*(POINTTWO/numReportedOn)/ONE - oldRep
        newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
        log(type=penalize, msg.sender, outcome, oldRep, repChange, newAfterRep, p, reportValue)
        EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
        CONSENSUS.setPenalized(branch, lastPeriod, msg.sender, event)
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, 1)
    # once penalized for all events actually get rid of net rep lost
    if(numReportedOn==CONSENSUS.getPenalizedNum(branch, lastPeriod, msg.sender)):
        if(newAfterRep <= 0):
            newAfterRep = 0
            EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
        if(oldRep==0):
            EXPEVENTS.setAfterRep(branch, lastPeriod, repBalance, msg.sender)
            EXPEVENTS.setBeforeRep(branch, lastPeriod, repBalance, msg.sender)
            newAfterRep = repBalance
            oldRep = repBalance
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, lastPeriod)
        CONSENSUS.increaseDenominator(branch, lastPeriod, newAfterRep)
        totalRepDifference = newAfterRep - oldRep
        if(repBalance + totalRepDifference <= 0):
            totalRepDifference = -1*repBalance
        if(totalRepDifference<0):
            # removes rep from reporter who lost it [those who gained rep will get it in the claim rep phase]
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), totalRepDifference)
            # sends that rep to the branch
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -totalRepDifference)
    return(1)

# ui has to call this to stay cheap / not check it elsewhere
def incrementPeriodAfterReporting(branch):
    refund()
    # do this after reporting is finished
    if(periodOver(branch)):
        period = block.timestamp / BRANCHES.getPeriodLength($branch) - 1
        lastPeriod = period - 1
        percentAppealed = (EXPEVENTS.getNumRoundTwo(branch, period)*ONE/EXPEVENTS.getNumberEvents(branch, period) + EXPEVENTS.getNumRoundTwo(branch, lastPeriod)*ONE/EXPEVENTS.getNumberEvents(branch, lastPeriod)) / 2
        BRANCHES.incrementPeriod(branch)
        # mult. by 2 b/c reporters only have to report on half the things they're selected to report on
        base_reporter_quantity = 2*(3*ONE + ((333*ONE * Percent_Appealed/ONE)**3 / 2**128))/ONE
        CONSENSUS.setBaseReportersLastPeriod(branch, BRANCHES.getBaseReporters(branch))
        BRANCHES.setBaseReporters(branch, base_reporter_quantity)
        return(1)
    else:
        return(0)

### Helper functions:
macro YES: TWO
macro NO: ONE
macro BAD: 3 * ONEHALF
macro CATCH_TOLERANCE: ONE / 10

macro periodOver($branch):
    # what the current vote period should be
    currentVotePeriod = block.timestamp / BRANCHES.getPeriodLength($branch) - 1
    # if actual vote period is less than what the current one should be, return 1, it can be incremented
    if(BRANCHES.getVotePeriod($branch) < currentVotePeriod):
        1
    else:
        0
        
# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD

macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE

macro scalar($event):
    ((EVENTS.getMaxValue($event)!=TWO || EVENTS.getMinValue($event)!=ONE) && EVENTS.getNumOutcomes($event)==2)

macro categorical($event):
    (EVENTS.getNumOutcomes($event)>2)

macro abs($a):
    if($a<0):
        $a = -$a
    $a

macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE