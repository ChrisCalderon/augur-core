# So we want to do the rbcr for both period 1 and period 2 at this time
# penalizeWrong for backstop 1
# in a fork - done on original branch
def penalizeRoundTwoWrong(branch, event):
    refund()
    lastPeriod = BRANCHES.getVotePeriod(branch) - 1
    reportValue = EXPEVENTS.getReport(branch,lastPeriod,event)
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
    lastPenalizationPeriod = lastPeriod - 1
    oldReport = EXPEVENTS.getReport(branch,lastPenalizationPeriod,event,msg.sender)
    if(!self.branch[branch].penalized[lastPeriod][msg.sender].notEnoughReportsPenalized):
        return(-3)
    if(BRANCHES.getForkPeriod(branch) == lastPeriod && event!=forkedEvent):
        return(0)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    if(residual > periodLength/2):
        return(-2)
    newRep = 0
    # if overruled
    overruled = 0
    if(scalar(event) or categorical(event)):
        if((BACKSTOPS.getOriginalOutcome(event) != EVENTS.getUncaughtOutcome(event) or BACKSTOPS.getOriginalEthicality(event)!=ethic_catch(EVENTS.getEthical(event)))):
            overruled = 1
    elif((BACKSTOPS.getOriginalOutcome(event) != catch(EVENTS.getUncaughtOutcome(event)) or BACKSTOPS.getOriginalEthicality(event)!=ethic_catch(EVENTS.getEthical(event)))):
        overruled = 1

    # if appealed don't allow rbcr until after the appeal process is over
    # if it's penalizing in the period it was pushed back to we can do the penalization, should do it for both the first and second period
    if(BACKSTOPS.getRoundTwo(event) && (BACKSTOPS.getFinal(event) or eventWasForked) && !self.branch[branch].penalized[lastPeriod][msg.sender].event[event] && reportValue):
        outcome = catch(EVENTS.getUncaughtOutcome(event))
        if(scalar(event) or categorical(event)):
            outcome = EVENTS.getUncaughtOutcome(event)
        oldRep = EXPEVENTS.getBeforeRep(branch, lastPeriod, msg.sender)
        p = self.proportionCorrect(event)
        newAfterRep = 0
        smoothedRep = 0
        totalRepDifference = 0
        # Do the first rbcr based on first report and final outcome if reported first time
        if(oldReport && !self.branch[branch].penalized[lastPeriod][msg.sender].event[event] && outcome!=0):
            oldEthics = EXPEVENTS.getEthicReport(branch, lastPenalizationPeriod, event, msg.sender)
            # wrong
            #184467440737095520 == 0.01 in fxp
            if(oldReport > outcome+184467440737095520 or oldReport < outcome-184467440737095520):
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = oldReport - outcome
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*p - ONE)/ONE
            # right
            else:
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = oldReport - outcome
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*(ONE-p)**2 / p + ONE)/ONE
            #smoothedRep = oldRep*.8 + newRep*.2
            smoothedRep = oldRep * 14757395258967642112/ONE + newRep * 3689348814741910528/ONE
            repChange = smoothedRep - oldRep
            newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
            EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
            totalRepDifference = repChange
            # for ethicality if diff. appeal then pay back the appeal bond from people who reported the wrong ethicality, but don't take rep beyond that and max at 20% of their rep respectively
            if(oldEthics != ethic_catch(EVENTS.getEthical(event)) && totalRepDifference >=0):
                totalRepDifference = -184467440737095520*repBalance / ONE
            if(repBalance + totalRepDifference <= 0):
                totalRepDifference = -1*repBalance
            # if overruled: reward the bonded challenger with whatever rep would normally be taken from the liars up to 2x the bond, rest goes to branch as usual later in the process
            if(overruled && self.bondPaid[event] < 200 && totalRepDifference < 0 && !eventWasForked):
                # done instead of sending to redistrib. pool
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), totalRepDifference)
                # sends that rep to the bonded challenger
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), -totalRepDifference)
                self.bondPaid[event] += -1*totalRepDifference
    
        # Do the second (for each user) based on second report and final outcome
        if(reportValue && !self.branch[branch].penalized[lastPeriod][msg.sender].event[event] && outcome!=0):
            ethics = EXPEVENTS.getEthicReport(branch, lastPeriod, event, msg.sender)
            # wrong
            #184467440737095520 == 0.01 in fxp
            if(reportValue > outcome+184467440737095520 or reportValue < outcome-184467440737095520):
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = reportValue - outcome
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*p - ONE)/ONE
            # right
            else:
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = reportValue - outcome    
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*(ONE-p)**2 / p + ONE)/ONE
            #smoothedRep = oldRep*.8 + newRep*.2
            smoothedRep = oldRep * 14757395258967642112/ONE + newRep * 3689348814741910528/ONE
            repChange = smoothedRep - oldRep
            newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
            EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
            totalRepDifference = repChange
            # for ethicality if diff. appeal then pay back the appeal bond from people who reported the wrong ethicality, but don't take rep beyond that and max at 20% of their rep respectively
            if(ethics != ethic_catch(EVENTS.getEthical(event)) && totalRepDifference >=0):
                totalRepDifference = -184467440737095520*repBalance / ONE
            if(repBalance + repChange <= 0):
                totalRepDifference = -1*repBalance
            if(overruled && self.bondPaid[event] < 200 && totalRepDifference < 0 && !eventWasForked):
                # done instead of sending to redistrib. pool
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), totalRepDifference)
                # sends that rep to the bonded challenger
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), -totalRepDifference)
                self.bondPaid[event] += -1*totalRepDifference

    self.branch[branch].penalized[lastPeriod][msg.sender].event[event] = 1
    self.branch[branch].penalized[lastPeriod][msg.sender].num += 1
    if(eventwasaforkedevent):
        penalizedForkedEventIfReportedOn = 1
        self.branch[branch].penalized[lastPeriod][msg.sender].num += EXPEVENTS.getNumReportsActual(branch, lastPeriod, msg.sender)
    if(EXPEVENTS.getNumReportsActual(branch, lastPeriod, msg.sender)==self.branch[branch].penalized[lastPeriod][msg.sender].num):
        if(newAfterRep <= 0):
            newAfterRep = 0
            EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
        self.branch[branch].penalizedUpTo[msg.sender] = lastPeriod
        self.branch[branch].denominator[lastPeriod] += newAfterRep
        totalRepDifference = newAfterRep - oldRep
        if(repBalance + totalRepDifference <= 0):
            totalRepDifference = -1*repBalance
        if(totalRepDifference<0):
            # removes rep from reporter who lost it [those who gained rep will get it in the claim rep phase]
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), totalRepDifference)
            # sends that rep to the branch
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -totalRepDifference)
    return(1)
