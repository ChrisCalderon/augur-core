#inset('refund.se')
macro ONE: 2**64
macro WEITOETH: 10^18

data cashcoinBalances[]

data owners[]

# deposit in wei, when goes to cash, converted to fixed point
def depositEther():
	self.cashcoinBalances[msg.sender] += msg.value * ONE / WEITOETH
	return(msg.value * ONE / WEITOETH)

# value is in wei
def withdrawEther(to, value):
	if(self.cashcoinBalances[msg.sender]>=value * ONE / WEITOETH):
		send(to, value)
		self.cashcoinBalances[msg.sender] -= value * ONE / WEITOETH
		return(1)
	else:
		return(0)

# @return: cash balance of address
def balance(address):
    #refund()
    return(self.cashcoinBalances[address])

# A random market could have a balance, and when that account was created/first used in the subcurrency, it'd have whatever contract that created it be the owner, so for example...
# needs to be called when making a market, branch, etc. or a new cash user acc.
def initiateOwner(account):
    #refund()
    if(self.owners[account]==0 and self.cashcoinBalances[account]==0):
        self.owners[account] = msg.sender
        return(1)
    else:
        return(0)

# should send values as fixed point in UI (1 is ONE, 4 is 4*ONE, .5 is ONEHALF, etc.)
# so cashcoin fees could just go to root branch, or we could not have fees besides 
# gas fee to do a send transaction
# @return: value sent, 0 if fails
def send(recver, value):
    #refund()
    if(self.owners[tx.origin]==0):
        self.owners[tx.origin] = tx.origin
    #if(self.owners[recver]==0):
    #    return(0)
    sender = tx.origin
    senderBalance = self.cashcoinBalances[sender]
    if(senderBalance >= value):
        self.cashcoinBalances[sender] -= value
        self.cashcoinBalances[recver] += value
        return(value)
    else:
        return(0)

# @return value of cash sent; fail is 0
def sendFrom(recver, value, from):
    #refund()
    # sendFrom would check if the sender had an owner, if it did, then it'd check and see if the msg.sender was the owner.
    # it's not owned by a regular account nor a contract owned account (i.e. a market's hash from markets.)
    if(from!=tx.origin and msg.sender!=self.owners[from]):
        return(0)
    #if(self.owners[recver]==0):
    #    return(0)
    senderBalance = self.cashcoinBalances[from]
    if(senderBalance >= value):
        self.cashcoinBalances[from] -= value
        self.cashcoinBalances[recver] += value
        return(value)
    else:
        return(0)

# make sure only coming from specific contracts
def subtractCash(ID, amount):
    #refund()
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    if(msg.sender!=self.owners[ID] && tx.origin!=self.owners[ID]):
        return(0)
    self.cashcoinBalances[ID] -= amount
    return(1)

def addCash(ID, amount):
    #refund()
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    if(msg.sender!=self.owners[ID] && tx.origin!=self.owners[ID]):
        return(0)
    self.cashcoinBalances[ID] += amount
    return(1)

def setCash(address, balance):
    #refund()
    #if !self.whitelist.check(msg.sender):
    #    return(-1)
    if(msg.sender!=self.owners[address] && tx.origin!=self.owners[ID]):
        return(0)
    self.cashcoinBalances[address] = balance
    return(1)